{
  "paging":{
    "is_end":false,
    "next":"https://api.zhihu.com/search_v3?advert_count=0\u0026correction=1\u0026filter_fields=\u0026lc_idx=0\u0026limit=20\u0026offset=20\u0026q=json\u0026search_hash_id=6d099903dbf302f16de3037c7ec7ceab\u0026search_source=Normal\u0026show_all_topics=0\u0026t=general\u0026vertical_info=0%2C1%2C0%2C0%2C0%2C0%2C0%2C0%2C0%2C1"
  },
  "data":[
    {
      "type":"zvideo",
      "highlight":{
        "creator":"遇见狂神说",
        "title":"【狂神说】什么是\u003cem\u003eJSON\u003c/em\u003e，通俗易懂理解"
      },
      "object":{
        "zvideo_id":"1346113021224439808",
        "video_id":"1346112908418457600",
        "video_answer_url":"",
        "type":"zvideo",
        "title":"【狂神说】什么是\u003cem\u003eJSON\u003c/em\u003e，通俗易懂理解",
        "description":"【狂神说】什么是JSON，通俗易懂理解",
        "video_url":"https://www.zhihu.com/zvideo/1346113021224439808",
        "creator":"遇见狂神说",
        "badge":[

        ],
        "badge_v2":{
          "title":"",
          "merged_badges":[

          ],
          "detail_badges":[

          ],
          "icon":"",
          "night_icon":""
        },
        "badge_v2_string":"{\"title\":\"\",\"merged_badges\":[],\"detail_badges\":null,\"icon\":\"\",\"night_icon\":\"\"}",
        "cover_url":"https://pica.zhimg.com/v2-05e7928f1d140385e0ea901b3ac979a0.jpg?source=4e949a73",
        "created_at":1613718409,
        "voteup_count":21,
        "voting":0,
        "play_count":20679,
        "comment_count":2,
        "duration":732.497,
        "is_liked":false,
        "is_zhi_plus":false,
        "extra":"",
        "author":{
          "id":"542df58b5ca2e5c1ed49e71ccdba72ec",
          "url_token":"kuangstudy",
          "name":"遇见狂神说",
          "headline":"编程是爱好，恭喜你发现宝藏男孩一枚，希望你们关注是因为喜欢我",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/542df58b5ca2e5c1ed49e71ccdba72ec",
          "type":"people",
          "avatar_url":"https://pic2.zhimg.com/50/v2-884e60c5cb327163eeed544d953f8d76_l.jpg?source=4e949a73",
          "badge":[

          ],
          "authority_info":null,
          "voteup_count":2364,
          "follower_count":11902,
          "badge_v2":{
            "title":"",
            "merged_badges":[

            ],
            "detail_badges":[

            ],
            "icon":"",
            "night_icon":""
          },
          "badge_v2_string":"{\"title\":\"\",\"merged_badges\":[],\"detail_badges\":null,\"icon\":\"\",\"night_icon\":\"\"}"
        },
        "attached_info_bytes":"Or8BCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYYyITMTM0NjExMzAyMTIyNDQzOTgwOCoTMTM0NjExMzAyMTIyNDQzOTgwOEoEanNvblAAWAFgAWoEanNvbnAEgAGnvKKonqL1ApgBAKABAKgBALABAbgBANgBFeABAoACAbgCAIoDAJIDEzE0MzM1NTcyOTc4Njg0NDc3NDSaAwCiAwkxMDFfM18yLjCqAwA="
      },
      "index":0,
      "id":"1346113021224439808"
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"notation 【javascript 对象表示法】 \u003cem\u003ejson\u003c/em\u003e 是存储和交换文本信息的语法。类似 xml。 \u003cem\u003ejson\u003c/em\u003e采用完全独立于任何程序语言的文本格式，使\u003cem\u003ejson\u003c/em\u003e成为理想的数据交换语言s为什么需要\u003cem\u003ejson\u003c/em\u003e提到\u003cem\u003ejson\u003c/em\u003e，我们就应该和xml来进行对比。xm…",
        "title":"\u003cem\u003eJSON\u003c/em\u003e入门看这一篇就够了"
      },
      "object":{
        "id":"33792109",
        "title":"\u003cem\u003eJSON\u003c/em\u003e入门看这一篇就够了",
        "type":"article",
        "url":"https://api.zhihu.com/articles/33792109",
        "excerpt":"notation 【javascript 对象表示法】 \u003cem\u003ejson\u003c/em\u003e 是存储和交换文本信息的语法。类似 xml。 \u003cem\u003ejson\u003c/em\u003e采用完全独立于任何程序语言的文本格式，使\u003cem\u003ejson\u003c/em\u003e成为理想的数据交换语言s为什么需要\u003cem\u003ejson\u003c/em\u003e提到\u003cem\u003ejson\u003c/em\u003e，我们就应该和xml来进行对比。xm…",
        "voteup_count":152,
        "comment_count":5,
        "created_time":1518446062,
        "updated_time":1518446062,
        "content":"\u003ch2\u003e什么是JSON\u003c/h2\u003e\u003cp data-pid=\"-s6UPtT6\"\u003eJSON：\u003cb\u003eJavaScript Object Notation\u003c/b\u003e 【JavaScript 对象表示法】\u003c/p\u003e\u003cp data-pid=\"s6IFJuX8\"\u003e\u003cb\u003eJSON 是存储和交换文本信息的语法。类似 XML。\u003c/b\u003e\u003c/p\u003e\u003cp data-pid=\"BVpN7CvK\"\u003e\u003cb\u003eJSON采用完全独立于任何程序语言的文本格式，使JSON成为理想的数据交换语言S\u003c/b\u003e\u003c/p\u003e\u003ch2\u003e为什么需要JSON\u003c/h2\u003e\u003cp data-pid=\"u4QWwxkf\"\u003e提到JSON，我们就应该和XML来进行对比。XML也是一种存储和交换文本信息的手段。那么JSON好在哪里呢？？\u003c/p\u003e\u003cp data-pid=\"3zOAH4M6\"\u003e\u003cb\u003eJSON 比 XML 更小、更快，更易解析\u003c/b\u003e。\u003c/p\u003e\u003cul\u003e\u003cli data-pid=\"uUgEfYpk\"\u003ejavaScript原生支持JSON，解析速度会很快\u003c/li\u003e\u003cli data-pid=\"oM_qrFsy\"\u003eXML解析成DOM对象的时候，浏览器【IE和fireFox】会有差异\u003c/li\u003e\u003cli data-pid=\"GWlzY7GF\"\u003e使用JSON会更简单\u003c/li\u003e\u003c/ul\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic2.zhimg.com/v2-f3c6bb3c01a34500698867631690d201_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"707\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-f3c6bb3c01a34500698867631690d201_r.jpg\"/\u003e\u003c/figure\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp data-pid=\"EKbeRL4D\"\u003e\u003cb\u003e更加容易创建JavaScript对象\u003c/b\u003e\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003evar p = {\u0026#39;city\u0026#39;:[\u0026#39;北京\u0026#39;,\u0026#39;上海\u0026#39;,\u0026#39;广州\u0026#39;,\u0026#39;深圳\u0026#39;]};\nfor(var i=0;i\u0026lt;p.city.length;i++){\n\tdocument.write(p.city[i]+\u0026#34;\u0026lt;br/\u0026gt;\u0026#34;);\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2\u003eJSON语法\u003c/h2\u003e\u003cp data-pid=\"0TiEo_z2\"\u003e\u003cb\u003e客户端与服务端的交互数据无非就是两种\u003c/b\u003e\u003c/p\u003e\u003cul\u003e\u003cli data-pid=\"n6ouCB7U\"\u003e\u003cb\u003e数组\u003c/b\u003e\u003c/li\u003e\u003cli data-pid=\"nPzpMx6X\"\u003e\u003cb\u003e对象\u003c/b\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-pid=\"P3VaPDln\"\u003e于是乎，JSON所表示的数据要么就是对象，要么就是数据\u003c/p\u003e\u003cp data-pid=\"DScuI1JS\"\u003eJSON语法是javaScript语法的子集，\u003cb\u003ejavaScript用[]中括号来表示数组，用{}大括号来表示对象，JSON亦是如此\u003c/b\u003e\u003c/p\u003e\u003ch2\u003eJSON数组：\u003c/h2\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003evar employees = [\n\t{ \u0026#34;firstName\u0026#34;:\u0026#34;Bill\u0026#34; , \u0026#34;lastName\u0026#34;:\u0026#34;Gates\u0026#34; },\n\t{ \u0026#34;firstName\u0026#34;:\u0026#34;George\u0026#34; , \u0026#34;lastName\u0026#34;:\u0026#34;Bush\u0026#34; },\n\t{ \u0026#34;firstName\u0026#34;:\u0026#34;Thomas\u0026#34; , \u0026#34;lastName\u0026#34;: \u0026#34;Carter\u0026#34; }\n\t];\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2\u003eJSON对象\u003c/h2\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003evar obj = {\n\n            age: 20,\n            str: \u0026#34;zhongfucheng\u0026#34;,\n            method: function () {\n                alert(\u0026#34;我爱学习\u0026#34;);\n            }\n\n        };\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"zBQsyEdb\"\u003e\u003cb\u003e当然啦，数组可以包含对象，在对象中也可以包含数组\u003c/b\u003e\u003c/p\u003e\u003ch2\u003e解析JSON\u003c/h2\u003e\u003cp data-pid=\"ibfxeE16\"\u003ejavaScript原生支持JSON的，\u003cb\u003e我们可以使用eval()函数来解析JSON，把JSON文本数据转换成一个JavaScript对象。\u003c/b\u003e\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003efunction test() {\n\t\t\t//在写JOSN的时候，记得把带上逗号\n            var txt = \u0026#34;{a:123,\u0026#34; +\n                    \u0026#34;b:\u0026#39;zhongfucheng\u0026#39;}\u0026#34;;\n\n            //使用eval解析JSON字符串，需要增添()\n            var aa = eval(\u0026#34;(\u0026#34; + txt + \u0026#34;)\u0026#34;);\n            alert(aa);\n\n        }\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003ch2\u003e效果\u003c/h2\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic1.zhimg.com/v2-60cf30e1437869b83525e692844aef38_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"283\" data-rawheight=\"169\" class=\"content_image\" width=\"283\"/\u003e\u003c/figure\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003ch2\u003e不用框架时将JavaBean转成JSON\u003c/h2\u003e\u003cul\u003e\u003cli data-pid=\"Ek15maxO\"\u003e使用Strus2的时候，Struts2自带了组件能够让JavaBean对象、集合转成是JSON，不用我们自己拼接...这是非常方便的。\u003c/li\u003e\u003cli data-pid=\"ee4RIlJH\"\u003e使用SpringMVC的时候，SpringMVC也支持将JavaBean转成JSON\u003c/li\u003e\u003c/ul\u003e\u003cp data-pid=\"V4rTM0ba\"\u003e但是，我们不一定使用框架来做开发呀。因此，我们还得\u003cb\u003e学习使用第三方库来将JavaBean对象、集合转成JSON\u003c/b\u003e\u003c/p\u003e\u003ch2\u003e导入开发包\u003c/h2\u003e\u003cul\u003e\u003cli data-pid=\"F2HWZYAt\"\u003ecommons-io-2.0.1.jar\u003c/li\u003e\u003cli data-pid=\"g9lV3oja\"\u003ecommons-lang-2.5.jar\u003c/li\u003e\u003cli data-pid=\"2nqSfXil\"\u003ecommons-collections-3.1.jar\u003c/li\u003e\u003cli data-pid=\"g7QKUP8b\"\u003ecommons-beanutils-1.7.0.jar\u003c/li\u003e\u003cli data-pid=\"SzP0DWVY\"\u003eezmorph-1.0.3.jar\u003c/li\u003e\u003cli data-pid=\"TteLKuiT\"\u003ejson-lib-2.1-jdk15.jar\u003c/li\u003e\u003c/ul\u003e\u003ch2\u003e事例代码\u003c/h2\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003epackage cn.itcast.javaee.js.bean2json;\n\nimport net.sf.json.JSONArray;\n\nimport java.util.*;\n\n/**\n * 使用第三方工具，将JavaBean对象/List或Set或Map对象转成JSON \n * @author AdminTC\n */\npublic class TestBean2Json {\n\tprivate static void javabean2json() {\n\t\tCity city = new City(1,\u0026#34;广州\u0026#34;);\n\t\tJSONArray jSONArray = JSONArray.fromObject(city);\n\t\tString jsonJAVA = jSONArray.toString();\n\t\tSystem.out.println(jsonJAVA);\n\t\t//[{\u0026#34;id\u0026#34;:1,\u0026#34;name\u0026#34;:\u0026#34;广州\u0026#34;}]\n\t}\n\tprivate static void list2json() {\n\t\tList\u0026lt;City\u0026gt; cityList = new ArrayList\u0026lt;City\u0026gt;();\n\t\tcityList.add(new City(1,\u0026#34;广州\u0026#34;));\n\t\tcityList.add(new City(2,\u0026#34;珠海\u0026#34;));\n\t\tJSONArray jSONArray = JSONArray.fromObject(cityList);\n\t\tString jsonJAVA = jSONArray.toString();\n\t\tSystem.out.println(jsonJAVA);\n\t\t//[{\u0026#34;id\u0026#34;:1,\u0026#34;name\u0026#34;:\u0026#34;广州\u0026#34;},{\u0026#34;id\u0026#34;:2,\u0026#34;name\u0026#34;:\u0026#34;珠海\u0026#34;}]\n\t}\n\tprivate static void set2json() {\n\t\tSet\u0026lt;City\u0026gt; citySet = new LinkedHashSet\u0026lt;City\u0026gt;();\n\t\tcitySet.add(new City(1,\u0026#34;广州\u0026#34;));\n\t\tcitySet.add(new City(2,\u0026#34;珠海\u0026#34;));\n\t\tJSONArray jSONArray = JSONArray.fromObject(citySet);\n\t\tString jsonJAVA = jSONArray.toString();\n\t\tSystem.out.println(jsonJAVA);\n\t\t//[{\u0026#34;id\u0026#34;:1,\u0026#34;name\u0026#34;:\u0026#34;广州\u0026#34;},{\u0026#34;id\u0026#34;:2,\u0026#34;name\u0026#34;:\u0026#34;珠海\u0026#34;}]\n\t}\n\tprivate static void javabeanlist2json() {\n\t\tList\u0026lt;City\u0026gt; cityList = new ArrayList\u0026lt;City\u0026gt;();\n\t\tcityList.add(new City(1,\u0026#34;中山\u0026#34;));\n\t\tcityList.add(new City(2,\u0026#34;佛山\u0026#34;));\n\t\tProvince province = new Province(1,\u0026#34;广东\u0026#34;,cityList);\n\t\t\n\t\tJSONArray jSONArray = JSONArray.fromObject(province);\n\t\tString jsonJAVA = jSONArray.toString();\n\t\tSystem.out.println(jsonJAVA);\n\t\t/*\n\t\t  [\n\t\t\t {\n\t\t\t  \u0026#34;id\u0026#34;:1,\n\t\t\t  \u0026#34;name\u0026#34;:\u0026#34;广东\u0026#34;\n\t\t\t  \u0026#34;cityList\u0026#34;:[{\u0026#34;id\u0026#34;:1,\u0026#34;name\u0026#34;:\u0026#34;中山\u0026#34;},{\u0026#34;id\u0026#34;:2,\u0026#34;name\u0026#34;:\u0026#34;佛山\u0026#34;}],\n\t\t     }\n\t\t  ]\n\t\t  */\n\t}\n\tprivate static void map2json() {\n\t\t\n\t\tList\u0026lt;City\u0026gt; cityList = new ArrayList\u0026lt;City\u0026gt;();\n\t\tcityList.add(new City(1,\u0026#34;中山\u0026#34;));\n\t\tcityList.add(new City(2,\u0026#34;佛山\u0026#34;));\n\t\t\n\t\tMap\u0026lt;String,Object\u0026gt; map = new LinkedHashMap\u0026lt;String,Object\u0026gt;();\n\t\tmap.put(\u0026#34;total\u0026#34;,cityList.size());//表示集合的长度\n\t\tmap.put(\u0026#34;rows\u0026#34;,cityList);//rows表示集合\n\t\t\n\t\tJSONArray jSONArray = JSONArray.fromObject(map);\n\t\tString jsonJAVA = jSONArray.toString();\n\t\tSystem.out.println(jsonJAVA);\n\t\t//[{\u0026#34;total\u0026#34;:2,\u0026#34;rows\u0026#34;:[{\u0026#34;id\u0026#34;:1,\u0026#34;name\u0026#34;:\u0026#34;中山\u0026#34;},{\u0026#34;id\u0026#34;:2,\u0026#34;name\u0026#34;:\u0026#34;佛山\u0026#34;}]}]\n\t\t\n\t\tjsonJAVA = jsonJAVA.substring(1,jsonJAVA.length()-1);\n\t\tSystem.out.println(jsonJAVA);\n\t}\n\t\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"JI6pLp3K\"\u003e\u003cb\u003e把要解析成JSON 的javaBena对象、集合放进下面这段代码即可！\u003c/b\u003e\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003eJSONArray jSONArray = JSONArray.fromObject(map);\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"6pZZ9vxo\"\u003e\u003cb\u003e无论放进去什么，返回的都是数组\u003c/b\u003e\u003c/p\u003e\u003ch2\u003e总结\u003c/h2\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic2.zhimg.com/v2-041178cf266e30e2c8ecaf0bee25dfd5_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"1280\" data-rawheight=\"707\" class=\"origin_image zh-lightbox-thumb\" width=\"1280\" data-original=\"https://pic2.zhimg.com/v2-041178cf266e30e2c8ecaf0bee25dfd5_r.jpg\"/\u003e\u003c/figure\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cblockquote data-pid=\"ztWjZl6E\"\u003e如果文章有错的地方欢迎指正，大家互相交流。习惯在微信看技术文章的同学，可以关注微信公众号:Java3y\u003c/blockquote\u003e",
        "thumbnail_info":{
          "count":0,
          "thumbnails":[

          ],
          "type":"",
          "total_count":0
        },
        "author":{
          "id":"163874b7944c363491e6d71bffe6d69c",
          "url_token":"Java_3y",
          "name":"Java3y",
          "headline":"",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/163874b7944c363491e6d71bffe6d69c",
          "type":"people",
          "avatar_url":"https://pica.zhimg.com/50/v2-633f654d90d4584ed050864addee1fd0_l.jpg?source=4e949a73",
          "badge":[

          ],
          "authority_info":null,
          "voteup_count":103391,
          "follower_count":49140,
          "badge_v2":{
            "title":"",
            "merged_badges":[

            ],
            "detail_badges":[

            ],
            "icon":"",
            "night_icon":""
          },
          "badge_v2_string":"{\"title\":\"\",\"merged_badges\":[],\"detail_badges\":null,\"icon\":\"\",\"night_icon\":\"\"}"
        },
        "voting":0,
        "relationship":{
          "is_voted":false,
          "is_author":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "flag":null,
        "is_zhi_plus":false,
        "extra":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OrABCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYByIHNTcwNjI3NyoIMzM3OTIxMDlKBGpzb25QAFgBYAFqBGpzb25wBIABp7yiqJ6i9QKYAQCgAQGoAQCwAQG4AQDQAe7LhtQF2AGYAeABBYACAbgCAIoDAJIDEzE0MzM1NTcyOTc4Njg0NDc3NDSaAwCiAwkxMDFfM18yLjCqAwA=",
        "content_tags":null
      },
      "index":1
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"\u0026#34;text\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;\u003cem\u003eJSON\u003c/em\u003e 反人类\u0026#34; }] } 跟 HTML 一比\u0026lt;h1 class=red\u0026gt;\u003cem\u003eJSON\u003c/em\u003e 反人类\u0026lt;/h1\u0026gt; 请问你想用哪个？",
        "title":"\u003cem\u003eJSON\u003c/em\u003e 可以替代 XML，为什么网页不用 \u003cem\u003eJSON\u003c/em\u003e 格式来写呢？"
      },
      "object":{
        "id":"1049206865",
        "type":"answer",
        "excerpt":"\u0026#34;text\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;\u003cem\u003eJSON\u003c/em\u003e 反人类\u0026#34; }] } 跟 HTML 一比\u0026lt;h1 class=red\u0026gt;\u003cem\u003eJSON\u003c/em\u003e 反人类\u0026lt;/h1\u0026gt; 请问你想用哪个？",
        "url":"https://api.zhihu.com/answers/1049206865",
        "voteup_count":1311,
        "comment_count":0,
        "created_time":1583077733,
        "updated_time":1583077733,
        "content":"\u003cp data-pid=\"OUNPRuq9\"\u003e你是说这样吗：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003e{\n  \u0026#34;type\u0026#34;: \u0026#34;tag\u0026#34;,\n  \u0026#34;tagName\u0026#34;:\u0026#34;h1\u0026#34;,\n  \u0026#34;class\u0026#34;:\u0026#34;red\u0026#34;,\n  \u0026#34;children\u0026#34;: [{\n      \u0026#34;type\u0026#34;:\u0026#34;text\u0026#34;, \u0026#34;content\u0026#34;: \u0026#34;JSON 反人类\u0026#34;\n   }]\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"8BL8GXzh\"\u003e跟 HTML 一比\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003e\u0026lt;h1 class=red\u0026gt;JSON 反人类\u0026lt;/h1\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"H-ufWoCA\"\u003e请问你想用哪个？\u003c/p\u003e",
        "thumbnail_info":{
          "count":0,
          "thumbnails":[

          ],
          "type":"thumbnail_info",
          "total_count":0
        },
        "relationship":{
          "voting":0,
          "is_author":false,
          "is_thanked":false,
          "is_nothelp":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "question":{
          "id":"373946861",
          "type":"question",
          "name":"\u003cem\u003eJSON\u003c/em\u003e 可以替代 XML，为什么网页不用 \u003cem\u003eJSON\u003c/em\u003e 格式来写呢？",
          "url":"https://api.zhihu.com/questions/373946861"
        },
        "author":{
          "id":"b90c7eb6d3d5a4e2ce453dd8ad377672",
          "url_token":"zhihusucks",
          "name":"方应杭",
          "headline":"",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/b90c7eb6d3d5a4e2ce453dd8ad377672",
          "type":"people",
          "avatar_url":"https://pic3.zhimg.com/50/v2-a73f2bb54d9d97a34dd606fff5b05bb7_l.jpg?source=4e949a73",
          "badge":[
            {
              "type":"identity",
              "description":"杭州饥人谷教育科技有限公司 CTO",
              "topics":[

              ]
            },
            {
              "type":"identity",
              "description":"已认证的机构",
              "topics":[

              ]
            }
          ],
          "authority_info":null,
          "voteup_count":219860,
          "follower_count":63725,
          "badge_v2":{
            "title":"杭州饥人谷教育科技有限公司 CTO",
            "merged_badges":[
              {
                "type":"identity",
                "detail_type":"identity",
                "title":"认证",
                "description":"杭州饥人谷教育科技有限公司 CTO",
                "url":"https://www.zhihu.com/account/verification/intro",
                "sources":[

                ],
                "icon":"",
                "night_icon":""
              }
            ],
            "detail_badges":[
              {
                "type":"identity",
                "detail_type":"identity_people",
                "title":"已认证的个人",
                "description":"杭州饥人谷教育科技有限公司 CTO",
                "url":"https://www.zhihu.com/account/verification/intro",
                "sources":[

                ],
                "icon":"https://pic3.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png",
                "night_icon":"https://pic1.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png"
              }
            ],
            "icon":"https://pic3.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png",
            "night_icon":"https://pic3.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png"
          },
          "old_badges":[
            {
              "type":"identity",
              "description":"杭州饥人谷教育科技有限公司 CTO"
            }
          ],
          "badge_v2_string":"{\"title\":\"杭州饥人谷教育科技有限公司 CTO\",\"merged_badges\":[{\"type\":\"identity\",\"detail_type\":\"identity\",\"title\":\"认证\",\"description\":\"杭州饥人谷教育科技有限公司 CTO\",\"url\":\"https://www.zhihu.com/account/verification/intro\",\"sources\":[],\"icon\":\"\",\"night_icon\":\"\"}],\"detail_badges\":[{\"type\":\"identity\",\"detail_type\":\"identity_people\",\"title\":\"已认证的个人\",\"description\":\"杭州饥人谷教育科技有限公司 CTO\",\"url\":\"https://www.zhihu.com/account/verification/intro\",\"sources\":[],\"icon\":\"https://pic3.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png\",\"night_icon\":\"https://pic1.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png\"}],\"icon\":\"https://pic3.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png\",\"night_icon\":\"https://pic3.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png\"}"
        },
        "flag":null,
        "is_zhi_plus":false,
        "extra":"",
        "health_tabs":null,
        "health_tag":"",
        "sub_content_type":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OskBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYBCIJMjIwODMxMTMxKgoxMDQ5MjA2ODY1Mgg0NTM3NzM4NDoJMzczOTQ2ODYxSgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCmAEAoAECqAEAsAEBuAEA0AHlsu/yBdgBnwrgAQCAAgG4AgCKAwCSAxMxNDMzNTU3Mjk3ODY4NDQ3NzQ0mgMAogMJMTAxXzNfMi4wqgMA",
        "content_tags":null
      },
      "index":2
    },
    {
      "type":"zvideo",
      "highlight":{
        "creator":"千锋教育",
        "title":"第24节 - 3.10 \u003cem\u003eJSON\u003c/em\u003e模块简介"
      },
      "object":{
        "zvideo_id":"1435281009567236096",
        "video_id":"1435261216550256640",
        "video_answer_url":"",
        "type":"zvideo",
        "title":"第24节 - 3.10 \u003cem\u003eJSON\u003c/em\u003e模块简介",
        "description":"",
        "video_url":"https://www.zhihu.com/zvideo/1435281009567236096",
        "creator":"千锋教育",
        "badge":[
          {
            "type":"identity",
            "description":"已认证账号",
            "topics":[

            ]
          },
          {
            "type":"identity",
            "description":"已认证的机构",
            "topics":[

            ]
          }
        ],
        "badge_v2":{
          "title":"已认证账号",
          "merged_badges":[
            {
              "type":"identity",
              "detail_type":"identity",
              "title":"认证",
              "description":"已认证账号",
              "url":"https://www.zhihu.com/account/verification/intro",
              "sources":[

              ],
              "icon":"",
              "night_icon":""
            }
          ],
          "detail_badges":[
            {
              "type":"identity",
              "detail_type":"identity_org",
              "title":"已认证账号",
              "description":"已认证账号",
              "url":"https://www.zhihu.com/account/verification/intro",
              "sources":[

              ],
              "icon":"https://pic2.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png",
              "night_icon":"https://pic2.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png"
            }
          ],
          "icon":"https://pic1.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png",
          "night_icon":"https://pic4.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png"
        },
        "old_badges":[
          {
            "type":"identity",
            "description":"已认证账号"
          }
        ],
        "badge_v2_string":"{\"title\":\"已认证账号\",\"merged_badges\":[{\"type\":\"identity\",\"detail_type\":\"identity\",\"title\":\"认证\",\"description\":\"已认证账号\",\"url\":\"https://www.zhihu.com/account/verification/intro\",\"sources\":[],\"icon\":\"\",\"night_icon\":\"\"}],\"detail_badges\":[{\"type\":\"identity\",\"detail_type\":\"identity_org\",\"title\":\"已认证账号\",\"description\":\"已认证账号\",\"url\":\"https://www.zhihu.com/account/verification/intro\",\"sources\":[],\"icon\":\"https://pic2.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png\",\"night_icon\":\"https://pic2.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png\"}],\"icon\":\"https://pic1.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png\",\"night_icon\":\"https://pic4.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png\"}",
        "cover_url":"https://pic3.zhimg.com/v2-dc1ecf0ba89171d197d5f2b02925536a.jpg?source=4e949a73",
        "created_at":1634977659,
        "voteup_count":0,
        "voting":0,
        "play_count":89,
        "comment_count":0,
        "duration":623.18,
        "is_liked":false,
        "is_zhi_plus":false,
        "extra":"",
        "author":{
          "id":"bb6db6016528a25fa68a84683efa26bb",
          "url_token":"qian-feng-jiao-yu-39",
          "name":"千锋教育",
          "headline":"初心至善 匠心育人",
          "gender":-1,
          "is_followed":false,
          "is_following":false,
          "user_type":"organization",
          "url":"https://api.zhihu.com/people/bb6db6016528a25fa68a84683efa26bb",
          "type":"people",
          "avatar_url":"https://pic3.zhimg.com/50/v2-caa71ce006ac78d907bd2b7f603877bb_l.jpg?source=4e949a73",
          "badge":[
            {
              "type":"identity",
              "description":"已认证账号",
              "topics":[

              ]
            },
            {
              "type":"identity",
              "description":"已认证的机构",
              "topics":[

              ]
            }
          ],
          "authority_info":null,
          "voteup_count":24859,
          "follower_count":16551,
          "badge_v2":{
            "title":"已认证账号",
            "merged_badges":[
              {
                "type":"identity",
                "detail_type":"identity",
                "title":"认证",
                "description":"已认证账号",
                "url":"https://www.zhihu.com/account/verification/intro",
                "sources":[

                ],
                "icon":"",
                "night_icon":""
              }
            ],
            "detail_badges":[
              {
                "type":"identity",
                "detail_type":"identity_org",
                "title":"已认证账号",
                "description":"已认证账号",
                "url":"https://www.zhihu.com/account/verification/intro",
                "sources":[

                ],
                "icon":"https://pic2.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png",
                "night_icon":"https://pic2.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png"
              }
            ],
            "icon":"https://pic1.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png",
            "night_icon":"https://pic4.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png"
          },
          "old_badges":[
            {
              "type":"identity",
              "description":"已认证账号"
            }
          ],
          "badge_v2_string":"{\"title\":\"已认证账号\",\"merged_badges\":[{\"type\":\"identity\",\"detail_type\":\"identity\",\"title\":\"认证\",\"description\":\"已认证账号\",\"url\":\"https://www.zhihu.com/account/verification/intro\",\"sources\":[],\"icon\":\"\",\"night_icon\":\"\"}],\"detail_badges\":[{\"type\":\"identity\",\"detail_type\":\"identity_org\",\"title\":\"已认证账号\",\"description\":\"已认证账号\",\"url\":\"https://www.zhihu.com/account/verification/intro\",\"sources\":[],\"icon\":\"https://pic2.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png\",\"night_icon\":\"https://pic2.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png\"}],\"icon\":\"https://pic1.zhimg.com/v2-235258cecb8a0f184c4d38483cd6f6b6_l.png\",\"night_icon\":\"https://pic4.zhimg.com/v2-45e870b8f0982bcd7537ea4627afbd00_l.png\"}"
        },
        "attached_info_bytes":"Or8BCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYYyITMTQzNTI4MTAwOTU2NzIzNjA5NioTMTQzNTI4MTAwOTU2NzIzNjA5NkoEanNvblAAWAFgAWoEanNvbnAEgAGnvKKonqL1ApgBAKABA6gBALABAbgBANgBAOABAIACAbgCAIoDAJIDEzE0MzM1NTcyOTc4Njg0NDc3NDSaAwCiAwkxMDFfM18yLjCqAwA="
      },
      "index":3,
      "id":"1435281009567236096"
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"可能会有人觉得这个题目莫名奇妙，但其实有时候这个末尾逗号有一定的道理。 假设你有一个列表，长这个样子：var list = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;] 我估计不会有谁去把它写成",
        "title":"\u003cem\u003eJSON\u003c/em\u003e「最后不能加逗号」是不是错误设计？"
      },
      "object":{
        "id":"292662958",
        "type":"answer",
        "excerpt":"可能会有人觉得这个题目莫名奇妙，但其实有时候这个末尾逗号有一定的道理。 假设你有一个列表，长这个样子：var list = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;] 我估计不会有谁去把它写成",
        "url":"https://api.zhihu.com/answers/292662958",
        "voteup_count":247,
        "comment_count":32,
        "created_time":1515513675,
        "updated_time":1515516381,
        "content":"\u003cp data-pid=\"Wde90_13\"\u003e可能会有人觉得这个题目莫名奇妙，但其实有时候这个末尾逗号有一定的道理。\u003c/p\u003e\u003cp data-pid=\"Q6-lwN_u\"\u003e假设你有一个列表，长这个样子：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-swift\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003elist\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"ib4yfcuM\"\u003e我估计不会有谁去把它写成：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-swift\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003elist\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"c9-7Rv7K\"\u003e这样很怪，而且没有必要。但是如果你的 list 长这个样子：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-swift\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nv\"\u003elist\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s\"\u003e\u0026#34;c\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"fxjnsaj4\"\u003e我们的 Lint 规则里面有一条就是当你用这种风格构造数组或枚举时，要加上最后一个逗号（Multi-line collection literals should have trailing commas）。\u003c/p\u003e\u003cp data-pid=\"B42KZnRO\"\u003e这样的话对版本控制有个好处，就是当你增加一行在尾部的时候，\u003cb\u003e产生的 diff 只有一行，而如果不是这种风格，则会产生三行 diff\u003c/b\u003e。\u003c/p\u003e\u003cp data-pid=\"0j7VmuYB\"\u003e另外一个好处只对某些语言有效果，比如 Python，末尾逗号习惯可以避免产生这样意想不到的代码：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-python\"\u003e\u003cspan class=\"nb\"\u003elist\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;2\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;3\u0026#39;\u003c/span\u003e\n  \u003cspan class=\"s1\"\u003e\u0026#39;4\u0026#39;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"vI1odfCU\"\u003e你可能增加一行之后忘记添加逗号，导致你产生了一个：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-python3\"\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;1\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;2\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e\u0026#39;34\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"r2quJZ-m\"\u003e当然这只是一个风格问题，各有优劣。\u003c/p\u003e",
        "thumbnail_info":{
          "count":0,
          "thumbnails":[

          ],
          "type":"thumbnail_info",
          "total_count":0
        },
        "relationship":{
          "voting":0,
          "is_author":false,
          "is_thanked":false,
          "is_nothelp":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "question":{
          "id":"265283301",
          "type":"question",
          "name":"\u003cem\u003eJSON\u003c/em\u003e「最后不能加逗号」是不是错误设计？",
          "url":"https://api.zhihu.com/questions/265283301"
        },
        "author":{
          "id":"1102b80f40b8c58df1697942f05b5f81",
          "url_token":"ios_dev",
          "name":"Ying Zhong",
          "headline":"本账号不再活跃使用，历史数据仅做为存档。",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/1102b80f40b8c58df1697942f05b5f81",
          "type":"people",
          "avatar_url":"https://pic1.zhimg.com/50/v2-70fb7d626af9cdae07e5680fbfaaaead_l.jpg?source=4e949a73",
          "badge":[
            {
              "type":"best_answerer",
              "description":"优秀回答者",
              "topics":[
                {
                  "id":"19555404",
                  "name":"iOS 开发",
                  "introduction":"基于苹果 iOS 系统的开发。",
                  "excerpt":"基于苹果 iOS 系统的开发。",
                  "type":"topic",
                  "url":"https://api.zhihu.com/topics/19555404",
                  "avatar_url":"https://pic1.zhimg.com/50/v2-80ba1d327955130e67118977ffa58cba_l.jpg?source=4e949a73"
                }
              ]
            },
            {
              "type":"identity",
              "description":"已认证的机构",
              "topics":[

              ]
            }
          ],
          "authority_info":null,
          "voteup_count":36295,
          "follower_count":28138,
          "badge_v2":{
            "title":"iOS 开发话题下的优秀答主",
            "merged_badges":[
              {
                "type":"best",
                "detail_type":"best",
                "title":"优秀答主",
                "description":"iOS 开发话题下的优秀答主",
                "url":"https://www.zhihu.com/question/48509984",
                "sources":[
                  {
                    "id":"19555404",
                    "token":"19555404",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19555404",
                    "name":"iOS 开发",
                    "avatar_path":"v2-80ba1d327955130e67118977ffa58cba.png",
                    "avatar_url":"https://pic4.zhimg.com/v2-80ba1d327955130e67118977ffa58cba_hd.jpg",
                    "description":"",
                    "priority":0
                  }
                ],
                "icon":"",
                "night_icon":""
              }
            ],
            "detail_badges":[
              {
                "type":"best",
                "detail_type":"best_answerer",
                "title":"优秀答主",
                "description":"iOS 开发话题下的优秀答主",
                "url":"https://www.zhihu.com/question/48509984",
                "sources":[
                  {
                    "id":"19555404",
                    "token":"19555404",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19555404",
                    "name":"iOS 开发",
                    "avatar_path":"v2-80ba1d327955130e67118977ffa58cba.png",
                    "avatar_url":"https://pic4.zhimg.com/v2-80ba1d327955130e67118977ffa58cba_hd.jpg",
                    "description":"",
                    "priority":0
                  }
                ],
                "icon":"https://pic1.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
                "night_icon":"https://pic3.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
              }
            ],
            "icon":"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
            "night_icon":"https://pic4.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
          },
          "old_badges":[
            {
              "type":"best_answerer",
              "description":"优秀答主",
              "topics":[
                {
                  "id":"19555404",
                  "type":"topic",
                  "url":"https://www.zhihu.com/topic/19555404",
                  "name":"iOS 开发",
                  "avatar_url":"https://pic4.zhimg.com/v2-80ba1d327955130e67118977ffa58cba_hd.jpg"
                }
              ]
            }
          ],
          "badge_v2_string":"{\"title\":\"iOS 开发话题下的优秀答主\",\"merged_badges\":[{\"type\":\"best\",\"detail_type\":\"best\",\"title\":\"优秀答主\",\"description\":\"iOS 开发话题下的优秀答主\",\"url\":\"https://www.zhihu.com/question/48509984\",\"sources\":[{\"id\":\"19555404\",\"token\":\"19555404\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19555404\",\"name\":\"iOS 开发\",\"avatar_path\":\"v2-80ba1d327955130e67118977ffa58cba.png\",\"avatar_url\":\"https://pic4.zhimg.com/v2-80ba1d327955130e67118977ffa58cba_hd.jpg\",\"description\":\"\",\"priority\":0}],\"icon\":\"\",\"night_icon\":\"\"}],\"detail_badges\":[{\"type\":\"best\",\"detail_type\":\"best_answerer\",\"title\":\"优秀答主\",\"description\":\"iOS 开发话题下的优秀答主\",\"url\":\"https://www.zhihu.com/question/48509984\",\"sources\":[{\"id\":\"19555404\",\"token\":\"19555404\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19555404\",\"name\":\"iOS 开发\",\"avatar_path\":\"v2-80ba1d327955130e67118977ffa58cba.png\",\"avatar_url\":\"https://pic4.zhimg.com/v2-80ba1d327955130e67118977ffa58cba_hd.jpg\",\"description\":\"\",\"priority\":0}],\"icon\":\"https://pic1.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic3.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"}],\"icon\":\"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic4.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"}"
        },
        "flag":{
          "flag_type":"author_follower",
          "flag_text":""
        },
        "is_zhi_plus":false,
        "extra":"",
        "health_tabs":null,
        "health_tag":"",
        "sub_content_type":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OtMBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYBCIIODMyODAzMTEqCTI5MjY2Mjk1ODIIMjA1NDQ3ODM6CTI2NTI4MzMwMUoEanNvblAAWAFgAWoEanNvbnAEgAGnvKKonqL1ApgBAKABBKgBALABAbgBAMIBCemrmOWFs+azqNABy87T0gXYAfcB4AEggAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMKoDAA==",
        "content_tags":null
      },
      "index":4
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"\u003cem\u003eJSON\u003c/em\u003e是一种取代XML的数据结构,和xml相比,它更小巧但描述能力却不差,由于它的小巧所以网络传输数据将减少更多流量从而加快速度, 那么,\u003cem\u003eJSON\u003c/em\u003e到底是什么?",
        "title":"\u003cem\u003eJSON\u003c/em\u003e 是什么，在数据交换中有什么用？"
      },
      "object":{
        "id":"902215103",
        "type":"answer",
        "excerpt":"\u003cem\u003eJSON\u003c/em\u003e是一种取代XML的数据结构,和xml相比,它更小巧但描述能力却不差,由于它的小巧所以网络传输数据将减少更多流量从而加快速度, 那么,\u003cem\u003eJSON\u003c/em\u003e到底是什么?",
        "url":"https://api.zhihu.com/answers/902215103",
        "voteup_count":0,
        "comment_count":0,
        "created_time":1574236659,
        "updated_time":1574236659,
        "content":"\u003cp data-pid=\"gyMAuYNc\"\u003eJSON是一种取代XML的数据结构,和xml相比,它更小巧但描述能力却不差,由于它的小巧所以网络传输数据将减少更多流量从而加快速度,\u003c/p\u003e\u003cp data-pid=\"QaKAliKK\"\u003e那么,JSON到底是什么?\u003c/p\u003e\u003cp data-pid=\"taYJI7ST\"\u003eJSON就是一串字符串 只不过元素会使用特定的符号标注。\u003c/p\u003e\u003cp data-pid=\"MauuKqUM\"\u003e{} 双括号表示对象\u003c/p\u003e\u003cp data-pid=\"Sq4vriwQ\"\u003e[] 中括号表示数组\u003c/p\u003e\u003cp data-pid=\"_l3JI6Wv\"\u003e\u0026#34;\u0026#34; 双引号内是属性或值\u003c/p\u003e\u003cp data-pid=\"WP6YSVk2\"\u003e: 冒号表示后者是前者的值(这个值可以是字符串、数字、也可以是另一个数组或对象)\u003c/p\u003e\u003cp data-pid=\"Q2cuF6MC\"\u003e所以 {\u0026#34;name\u0026#34;: \u0026#34;Michael\u0026#34;} 可以理解为是一个包含name为Michael的对象\u003c/p\u003e\u003cp data-pid=\"_-ghtDXH\"\u003e而[{\u0026#34;name\u0026#34;: \u0026#34;Michael\u0026#34;},{\u0026#34;name\u0026#34;: \u0026#34;Jerry\u0026#34;}]就表示包含两个对象的数组\u003c/p\u003e\u003cp data-pid=\"Xk60oFAj\"\u003e当然了,你也可以使用{\u0026#34;name\u0026#34;:[\u0026#34;Michael\u0026#34;,\u0026#34;Jerry\u0026#34;]}来简化上面一部,这是一个拥有一个name数组的对象\u003c/p\u003e\u003cp data-pid=\"Aqngr1P3\"\u003eps:现在还有很多人存在一些误区,为什么{name:\u0026#39;json\u0026#39;}在检验时通过不了,那是因为JSON官网最新规范规定\u003cbr/\u003e如果是字符串,那不管是键或值最好都用双引号引起来,所以上面的代码就是{\u0026#34;name\u0026#34;:\u0026#34;json\u0026#34;}\u003cbr/\u003e不要反驳,官网就是这么定义的。\u003c/p\u003e\u003cp data-pid=\"9bOghLjd\"\u003e来源：“json”\u003c/p\u003e",
        "thumbnail_info":{
          "count":0,
          "thumbnails":[

          ],
          "type":"thumbnail_info",
          "total_count":0
        },
        "relationship":{
          "voting":0,
          "is_author":false,
          "is_thanked":false,
          "is_nothelp":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "question":{
          "id":"20836506",
          "type":"question",
          "name":"\u003cem\u003eJSON\u003c/em\u003e 是什么，在数据交换中有什么用？",
          "url":"https://api.zhihu.com/questions/20836506"
        },
        "author":{
          "id":"4a5c3e51f69974f852a660d44ef6fca2",
          "url_token":"start-26-29",
          "name":"我有几分像从前",
          "headline":"",
          "gender":0,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/4a5c3e51f69974f852a660d44ef6fca2",
          "type":"people",
          "avatar_url":"https://pic3.zhimg.com/50/v2-4de8881ee4c78e57b33a8856dda3db62_l.jpg?source=4e949a73",
          "badge":[

          ],
          "authority_info":null,
          "voteup_count":24,
          "follower_count":30,
          "badge_v2":{
            "title":"",
            "merged_badges":[

            ],
            "detail_badges":[

            ],
            "icon":"",
            "night_icon":""
          },
          "badge_v2_string":"{\"title\":\"\",\"merged_badges\":[],\"detail_badges\":null,\"icon\":\"\",\"night_icon\":\"\"}"
        },
        "flag":null,
        "is_zhi_plus":false,
        "extra":"",
        "health_tabs":null,
        "health_tag":"",
        "sub_content_type":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OsQBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYBCIJMTk0MTA1NzcyKgk5MDIyMTUxMDMyBjUxNTA3MjoIMjA4MzY1MDZKBGpzb25QAFgBYAFqBGpzb25wBIABp7yiqJ6i9QKYAQCgAQWoAQCwAQG4AQDQAfPj0+4F2AEA4AEAgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMKoDAA==",
        "content_tags":null
      },
      "index":5
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"toml \u0026gt; yaml \u0026gt; \u003cem\u003ejson\u003c/em\u003e \u0026gt; xml \u0026gt; plist 可以存储的数据复杂度：xml \u0026gt; yaml \u0026gt; toml ~ \u003cem\u003ejson\u003c/em\u003e ~ plist \u0026gt; in",
        "title":"YAML，\u003cem\u003eJSON\u003c/em\u003e，ini，XML 用来做配置文件，优缺点分别是什么？"
      },
      "object":{
        "id":"93720965",
        "type":"answer",
        "excerpt":"toml \u0026gt; yaml \u0026gt; \u003cem\u003ejson\u003c/em\u003e \u0026gt; xml \u0026gt; plist 可以存储的数据复杂度：xml \u0026gt; yaml \u0026gt; toml ~ \u003cem\u003ejson\u003c/em\u003e ~ plist \u0026gt; in",
        "url":"https://api.zhihu.com/answers/93720965",
        "voteup_count":147,
        "comment_count":33,
        "created_time":1459802666,
        "updated_time":1459877310,
        "content":"\u003cp data-pid=\"q1ivPlh1\"\u003e适合人类编写：ini \u0026gt; toml \u0026gt; yaml \u0026gt; json \u0026gt; xml \u0026gt; plist\u003c/p\u003e\u003cp data-pid=\"eOVhH3Ba\"\u003e可以存储的数据复杂度：xml \u0026gt; yaml \u0026gt; toml ~ json ~ plist \u0026gt; ini\u003c/p\u003e",
        "thumbnail_info":{
          "count":0,
          "thumbnails":[

          ],
          "type":"thumbnail_info",
          "total_count":0
        },
        "relationship":{
          "voting":0,
          "is_author":false,
          "is_thanked":false,
          "is_nothelp":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "question":{
          "id":"41253282",
          "type":"question",
          "name":"YAML，\u003cem\u003eJSON\u003c/em\u003e，ini，XML 用来做配置文件，优缺点分别是什么？",
          "url":"https://api.zhihu.com/questions/41253282"
        },
        "author":{
          "id":"b6d28ac2b88b7f230552bab4a0aceaca",
          "url_token":"be5invis",
          "name":"Belleve",
          "headline":"OXO 做文本框的；ATypI 会员",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/b6d28ac2b88b7f230552bab4a0aceaca",
          "type":"people",
          "avatar_url":"https://pic2.zhimg.com/50/v2-875da701d0b9f564274eb592f365cd37_l.jpg?source=4e949a73",
          "badge":[
            {
              "type":"best_answerer",
              "description":"优秀回答者",
              "topics":[
                {
                  "id":"19554298",
                  "name":"编程",
                  "introduction":"编程是编写程序的中文简称，就是让计算机代为解决某个问题，对某个计算体系规定一定的运算方式，是计算体系按照该计算方式运行，并最终得到相应结果的过程。为了使计算机能够理解人的意图，人类就必须将需解决的问题的思路、方法和手段通过计算机能够理解的形式告诉计算机，使得计算机能够根据人的指令一步一步去工作，完成某种特定的任务。这种人和计算体系之间交流的过程就是编程。编程：设计具备逻辑流动作用的一种“可控体系”【注：编程不一定是针对计算机程序而言的，针对具备逻辑计算力的体系，都可以算编程。】",
                  "excerpt":"编程是编写程序的中文简称，就是让计算机代为解决某个问题，对某个计算体系规定一定的运算方式，是计算体系按照该计算方式运行，并最终得到相应结果的过程。为了使计算机能够理解人的意图，人类就必须将需解决的问题的思路、方法和手段通过计算机能够理解的形式告诉计算机，使得计算机能够根据人的指令一步一步去工作，完成某种特定的任务。这种人和计算体系之间交流的过程就是编程。编程：设计具备逻辑流动作用的一种“可控体系…",
                  "type":"topic",
                  "url":"https://api.zhihu.com/topics/19554298",
                  "avatar_url":"https://pic3.zhimg.com/50/v2-4030982b9aed71d12b350a4c3ba5078d_l.jpg?source=4e949a73"
                },
                {
                  "id":"19580349",
                  "name":"计算机科学",
                  "introduction":"\u003cb\u003e计算机科学\u003c/b\u003e（Computer Science, CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科。\u003cbr/\u003e 它通常被形容为对那些创造、描述以及转换信息的算法处理的系统研究。计算机科学包含很多分支领域；其中一些，比如计算机图形学强调特定结果的计算，而另外一些，比如计算复杂性理论是学习计算问题的性质。还有一些领域专注于挑战怎样实现计算。比如程序设计语言理论学习描述计算的方法，而程序设计是应用特定的程序设计语言解决特定的计算问题，人机交互则是专注于挑战怎样使计算机和计算变得有用、可用，以及随时随地为\u003ca href=\"https//link.zhihu.com/?target=http%3A//zh.wikipedia.org/wiki/%25E4%25BA%25BA\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003e人\u003c/a\u003e所用。\u003cbr/\u003e\u003cb\u003e现代计算机科学( Computer Science)包含理论计算机科学和应用计算机科学两大分支。\u003c/b\u003e",
                  "excerpt":"计算机科学（Computer Science, CS）是系统性研究信息与计算的理论基础以及它们在计算机系统中如何实现与应用的实用技术的学科。 它通常被形容为对那些创造、描述以及转换信息的算法处理的系统研究。计算机科学包含很多分支领域；其中一些，比如计算机图形学强调特定结果的计算，而另外一些，比如计算复杂性理论是学习计算问题的性质。还有一些领域专注于挑战怎样实现计算。比如程序设计语言理论学习描述计算的方法，而程序设计…",
                  "type":"topic",
                  "url":"https://api.zhihu.com/topics/19580349",
                  "avatar_url":"https://pic1.zhimg.com/50/v2-2425584cf56e7caae35080a03010a30a_l.jpg?source=4e949a73"
                }
              ]
            },
            {
              "type":"identity",
              "description":"已认证的机构",
              "topics":[

              ]
            }
          ],
          "authority_info":null,
          "voteup_count":259081,
          "follower_count":167037,
          "badge_v2":{
            "title":" 优秀提问者",
            "merged_badges":[
              {
                "type":"best",
                "detail_type":"best",
                "title":"优秀答主",
                "description":"计算机科学话题下的优秀答主",
                "url":"https://www.zhihu.com/question/48509984",
                "sources":[
                  {
                    "id":"19580349",
                    "token":"19580349",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19580349",
                    "name":"计算机科学",
                    "avatar_path":"v2-5e706b9bf3415cd7c0ffd4eb1e1cba2d",
                    "avatar_url":"https://pic3.zhimg.com/v2-5e706b9bf3415cd7c0ffd4eb1e1cba2d_hd.jpg",
                    "description":"",
                    "priority":0
                  },
                  {
                    "id":"19554298",
                    "token":"19554298",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19554298",
                    "name":"编程",
                    "avatar_path":"v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                    "avatar_url":"https://pic4.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_hd.jpg",
                    "description":"",
                    "priority":0
                  }
                ],
                "icon":"",
                "night_icon":""
              }
            ],
            "detail_badges":[
              {
                "type":"reward",
                "detail_type":"best_questioner",
                "title":"优秀提问者",
                "description":" 优秀提问者",
                "url":"https://zhuanlan.zhihu.com/p/405412869",
                "sources":[

                ],
                "icon":"https://pic1.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
                "night_icon":"https://pic2.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
              },
              {
                "type":"best",
                "detail_type":"best_answerer",
                "title":"优秀答主",
                "description":"计算机科学话题下的优秀答主",
                "url":"https://www.zhihu.com/question/48509984",
                "sources":[
                  {
                    "id":"19580349",
                    "token":"19580349",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19580349",
                    "name":"计算机科学",
                    "avatar_path":"v2-5e706b9bf3415cd7c0ffd4eb1e1cba2d",
                    "avatar_url":"https://pic3.zhimg.com/v2-5e706b9bf3415cd7c0ffd4eb1e1cba2d_hd.jpg",
                    "description":"",
                    "priority":0
                  },
                  {
                    "id":"19554298",
                    "token":"19554298",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19554298",
                    "name":"编程",
                    "avatar_path":"v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                    "avatar_url":"https://pic4.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_hd.jpg",
                    "description":"",
                    "priority":0
                  }
                ],
                "icon":"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
                "night_icon":"https://pic2.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
              }
            ],
            "icon":"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
            "night_icon":"https://pic1.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
          },
          "old_badges":[
            {
              "type":"best_answerer",
              "description":"优秀答主",
              "topics":[
                {
                  "id":"19580349",
                  "type":"topic",
                  "url":"https://www.zhihu.com/topic/19580349",
                  "name":"计算机科学",
                  "avatar_url":"https://pic3.zhimg.com/v2-5e706b9bf3415cd7c0ffd4eb1e1cba2d_hd.jpg"
                },
                {
                  "id":"19554298",
                  "type":"topic",
                  "url":"https://www.zhihu.com/topic/19554298",
                  "name":"编程",
                  "avatar_url":"https://pic4.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_hd.jpg"
                }
              ]
            }
          ],
          "badge_v2_string":"{\"title\":\" 优秀提问者\",\"merged_badges\":[{\"type\":\"best\",\"detail_type\":\"best\",\"title\":\"优秀答主\",\"description\":\"计算机科学话题下的优秀答主\",\"url\":\"https://www.zhihu.com/question/48509984\",\"sources\":[{\"id\":\"19580349\",\"token\":\"19580349\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19580349\",\"name\":\"计算机科学\",\"avatar_path\":\"v2-5e706b9bf3415cd7c0ffd4eb1e1cba2d\",\"avatar_url\":\"https://pic3.zhimg.com/v2-5e706b9bf3415cd7c0ffd4eb1e1cba2d_hd.jpg\",\"description\":\"\",\"priority\":0},{\"id\":\"19554298\",\"token\":\"19554298\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19554298\",\"name\":\"编程\",\"avatar_path\":\"v2-27b8ba1e647956fa6f1a2a8ad90138ef\",\"avatar_url\":\"https://pic4.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_hd.jpg\",\"description\":\"\",\"priority\":0}],\"icon\":\"\",\"night_icon\":\"\"}],\"detail_badges\":[{\"type\":\"reward\",\"detail_type\":\"best_questioner\",\"title\":\"优秀提问者\",\"description\":\" 优秀提问者\",\"url\":\"https://zhuanlan.zhihu.com/p/405412869\",\"sources\":[],\"icon\":\"https://pic1.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic2.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"},{\"type\":\"best\",\"detail_type\":\"best_answerer\",\"title\":\"优秀答主\",\"description\":\"计算机科学话题下的优秀答主\",\"url\":\"https://www.zhihu.com/question/48509984\",\"sources\":[{\"id\":\"19580349\",\"token\":\"19580349\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19580349\",\"name\":\"计算机科学\",\"avatar_path\":\"v2-5e706b9bf3415cd7c0ffd4eb1e1cba2d\",\"avatar_url\":\"https://pic3.zhimg.com/v2-5e706b9bf3415cd7c0ffd4eb1e1cba2d_hd.jpg\",\"description\":\"\",\"priority\":0},{\"id\":\"19554298\",\"token\":\"19554298\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19554298\",\"name\":\"编程\",\"avatar_path\":\"v2-27b8ba1e647956fa6f1a2a8ad90138ef\",\"avatar_url\":\"https://pic4.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_hd.jpg\",\"description\":\"\",\"priority\":0}],\"icon\":\"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic2.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"}],\"icon\":\"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic1.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"}"
        },
        "flag":null,
        "is_zhi_plus":false,
        "extra":"",
        "health_tabs":null,
        "health_tag":"",
        "sub_content_type":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OsQBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYBCIIMzI5Mjg5NjQqCDkzNzIwOTY1Mgc4NzA4NjEyOgg0MTI1MzI4MkoEanNvblAAWAFgAWoEanNvbnAEgAGnvKKonqL1ApgBAKABBqgBALABAbgBANABqqSLuAXYAZMB4AEhgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMKoDAA==",
        "content_tags":null
      },
      "index":6
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"就是数组元素tag比较重复冗余。JSON 比较易读。 JSON的true/false/null也能容易统一至一般编程语言的对应语义。 最后，大家可关注我的C++开源JSON项目 miloyip/rapid\u003cem\u003ejson\u003c/em\u003e",
        "title":"为什么都反对 XML 而支持使用 \u003cem\u003eJSON\u003c/em\u003e？"
      },
      "object":{
        "id":"31257498",
        "type":"answer",
        "excerpt":"就是数组元素tag比较重复冗余。JSON 比较易读。 JSON的true/false/null也能容易统一至一般编程语言的对应语义。 最后，大家可关注我的C++开源JSON项目 miloyip/rapid\u003cem\u003ejson\u003c/em\u003e",
        "url":"https://api.zhihu.com/answers/31257498",
        "voteup_count":917,
        "comment_count":35,
        "created_time":1412133490,
        "updated_time":1422112306,
        "content":"\u003cp data-pid=\"KYlJvVZR\"\u003e我只提一个使用上的因素：JSON的结构更容易\u003cb\u003e映射\u003c/b\u003e至一般语言的数据结构。\u003c/p\u003e\u003cp data-pid=\"Km_Qc1ky\"\u003eXML和JSON的主要组成成分：\u003c/p\u003e\u003cul\u003e\u003cli data-pid=\"bOiPt9m_\"\u003eXML是element、attribute和element content。\u003cbr/\u003e\u003c/li\u003e\u003cli data-pid=\"jpvRwJw7\"\u003eJSON是object、array、string、number、boolean(true/false)和null。\u003cbr/\u003e\u003c/li\u003e\u003c/ul\u003e\u003cp data-pid=\"5EVmkv5I\"\u003eXML要表示一个object (指name-value pair的集合)，最初可能会使用element作为object，每个key-value pair 用 attribute 表示：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003e\u0026lt;student name=\u0026#34;John\u0026#34; age=\u0026#34;10\u0026#34;/\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"BQxLE_6_\"\u003e但如个某个 value 也是 object，那么就不可以当作attribute:\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003e\u0026lt;student name=\u0026#34;John\u0026#34; age=\u0026#34;10\u0026#34;\u0026gt;\n    \u0026lt;address\u0026gt;\n        \u0026lt;country\u0026gt;China\u0026lt;/country\u0026gt;\n        \u0026lt;province\u0026gt;Guang Dong\u0026lt;/province\u0026gt;\n        \u0026lt;city\u0026gt;...\u0026lt;/city\u0026gt;\n        \u0026lt;district\u0026gt;...\u0026lt;/district\u0026gt;\n        ...\n    \u0026lt;/address\u0026gt;\n\u0026lt;/student\u0026gt;\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"NB08-oPF\"\u003e那么，什么时候用element，什么时候用attribute，就已经是一个问题了。[1] 提到一些优缺点。\u003c/p\u003e\u003cp data-pid=\"ncIvkGhI\"\u003e而JSON因为有object这种类型，可以自然地映射，不需考虑上述的问题，自然地得到以下的格式。\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003e{\n    \u0026#34;name\u0026#34;: \u0026#34;John\u0026#34;,\n    \u0026#34;age\u0026#34; : 10,\n    \u0026#34;address\u0026#34; : {\n        \u0026#34;country\u0026#34; : \u0026#34;China\u0026#34;,\n        \u0026#34;province\u0026#34; : \u0026#34;Guang Dong\u0026#34;,\n        \u0026#34;city\u0026#34; : \u0026#34;..\u0026#34;,\n        \u0026#34;district\u0026#34; : \u0026#34;..\u0026#34;,\n        ...\n    }\n}\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"nLqprqSt\"\u003e除此以外，\u003c/p\u003e\u003cul\u003e\u003cli data-pid=\"QpA0_0ue\"\u003eXML需要选择怎么处理element content的换行，而JSON string则不须作这个选择。\u003cbr/\u003e\u003c/li\u003e\u003cli data-pid=\"B2fUNBDO\"\u003eXML只有文字，没有预设的数字格式，而JSON则有明确的number格式，这样在locale上也安全。\u003c/li\u003e\u003cli data-pid=\"L-rbxkG9\"\u003eXML映射数组没大问题，就是数组元素tag比较重复冗余。JSON 比较易读。\u003c/li\u003e\u003cli data-pid=\"GrP23HV9\"\u003eJSON的true/false/null也能容易统一至一般编程语言的对应语义。\u003c/li\u003e\u003c/ul\u003e\u003cp data-pid=\"7yKUdehK\"\u003e最后，大家可关注我的C++开源JSON项目 \u003c/p\u003e\u003ca href=\"https://link.zhihu.com/?target=https%3A//github.com/miloyip/rapidjson\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003emiloyip/rapidjson · GitHub\u003c/a\u003e\u003cp data-pid=\"pRq79bdL\"\u003e 。\u003c/p\u003e\u003cp data-pid=\"FG6WKseL\"\u003e[1] ASC X12 REFERENCE MODEL FOR XML DESIGN §7.2.5 \u003c/p\u003e\u003ca href=\"https://link.zhihu.com/?target=http%3A//www.x12.org/x12org/comments/X12Reference_Model_For_XML_Design.pdf\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003e\u003cspan class=\"invisible\"\u003ehttp://www.\u003c/span\u003e\u003cspan class=\"visible\"\u003ex12.org/x12org/comments\u003c/span\u003e\u003cspan class=\"invisible\"\u003e/X12Reference_Model_For_XML_Design.pdf\u003c/span\u003e\u003cspan class=\"ellipsis\"\u003e\u003c/span\u003e\u003c/a\u003e",
        "thumbnail_info":{
          "count":0,
          "thumbnails":[

          ],
          "type":"thumbnail_info",
          "total_count":0
        },
        "relationship":{
          "voting":0,
          "is_author":false,
          "is_thanked":false,
          "is_nothelp":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "question":{
          "id":"25636060",
          "type":"question",
          "name":"为什么都反对 XML 而支持使用 \u003cem\u003eJSON\u003c/em\u003e？",
          "url":"https://api.zhihu.com/questions/25636060"
        },
        "author":{
          "id":"1e2c9261b85996ccc3c5436850127e33",
          "url_token":"miloyip",
          "name":"Milo Yip",
          "headline":"游戏程序员、《游戏引擎架构》译者",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/1e2c9261b85996ccc3c5436850127e33",
          "type":"people",
          "avatar_url":"https://pica.zhimg.com/50/v2-041d584bebcc5a34e709f2af38c654c9_l.jpg?source=4e949a73",
          "badge":[

          ],
          "authority_info":null,
          "voteup_count":358404,
          "follower_count":304343,
          "badge_v2":{
            "title":"2016 新知答主",
            "merged_badges":[

            ],
            "detail_badges":[
              {
                "type":"reward",
                "detail_type":"honored_vip",
                "title":"新知答主",
                "description":"2016 新知答主",
                "url":"",
                "sources":[
                  {
                    "id":"2016",
                    "token":"",
                    "type":"year",
                    "url":"",
                    "name":"",
                    "avatar_path":"",
                    "avatar_url":"",
                    "description":"",
                    "priority":2016
                  }
                ],
                "icon":"https://pic1.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
                "night_icon":"https://pic3.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
              }
            ],
            "icon":"",
            "night_icon":""
          },
          "badge_v2_string":"{\"title\":\"2016 新知答主\",\"merged_badges\":[],\"detail_badges\":[{\"type\":\"reward\",\"detail_type\":\"honored_vip\",\"title\":\"新知答主\",\"description\":\"2016 新知答主\",\"url\":\"\",\"sources\":[{\"id\":\"2016\",\"token\":\"\",\"type\":\"year\",\"url\":\"\",\"name\":\"\",\"avatar_path\":\"\",\"avatar_url\":\"\",\"description\":\"\",\"priority\":2016}],\"icon\":\"https://pic1.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic3.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"}],\"icon\":\"\",\"night_icon\":\"\"}"
        },
        "flag":{
          "flag_type":"author_follower",
          "flag_text":""
        },
        "is_zhi_plus":false,
        "extra":"",
        "health_tabs":null,
        "health_tag":"",
        "sub_content_type":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"Os8BCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYBCIHNzg4ODA0MCoIMzEyNTc0OTgyBzI0MzcxNzA6CDI1NjM2MDYwSgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCmAEAoAEHqAEAsAEBuAEAwgEJ6auY5YWz5rOo0AHy5K2hBdgBlQfgASOAAgG4AgCKAwCSAxMxNDMzNTU3Mjk3ODY4NDQ3NzQ0mgMAogMJMTAxXzNfMi4wqgMA",
        "content_tags":null
      },
      "index":7
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"\u003cem\u003ejson\u003c/em\u003e（javascript object notation）是一种轻量级的数据交换语言，以文字为基础，且易于让人阅读，同时也方便了机器进行解析和生成。\u003cem\u003ejson\u003c/em\u003e简单说就是javascript中的对象和数组，所以这两种结构就是对象和数组两种结构，通过这两种结构可以表示各种复杂的结构",
        "title":"\u003cem\u003eJSON\u003c/em\u003e"
      },
      "object":{
        "id":"19602492",
        "name":"\u003cem\u003eJSON\u003c/em\u003e",
        "url":"https://api.zhihu.com/topics/19602492",
        "type":"topic",
        "excerpt":"\u003cem\u003ejson\u003c/em\u003e（javascript object notation）是一种轻量级的数据交换语言，以文字为基础，且易于让人阅读，同时也方便了机器进行解析和生成。\u003cem\u003ejson\u003c/em\u003e简单说就是javascript中的对象和数组，所以这两种结构就是对象和数组两种结构，通过这两种结构可以表示各种复杂的结构",
        "introduction":"JSON(JavaScript Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本格式来存储和表示数据。简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。 易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。",
        "description":"",
        "avatar_url":"https://pic1.zhimg.com/80/v2-48e140b21eea3c011941e12757691edb_qhd.jpg",
        "is_following":false,
        "questions_count":1010,
        "followers_count":5007,
        "follower_count":5007,
        "top_answer_count":5150,
        "score":0.05568377673625946,
        "aliases":[

        ],
        "has_meta":true,
        "meta":{
          "id":1023603417779957760,
          "type":"metapedia",
          "category":"n_wiki",
          "description":"",
          "description1":"JSON（JavaScript Object Notation）是一种轻量级的数据交换语言，以文字为基础，且易于让人阅读，同时也方便了机器进行解析和生成。JSON简单说就是javascript中的对象和数组，所以这两种结构就是对象和数组两种结构，通过这两种结构可以表示各种复杂的结构，其可以将JavaScript 对象中表示的一组数据转换为字符串，然后就可以在函数之间轻松地传递这个字符串，或者在异步应用程序中将字符串从Web客户机传递给服务器端程序。JSON采用完全独立于程序语言的文本格式，但是也使用了类C语言的习惯（包括C、C++、C#、Java、JavaScript、Perl、Python等）。这些特性使JSON成为理想的数据交换语言。",
          "description2":"",
          "subtitle":"",
          "title":"JSON",
          "template":{
            "meta_template_type":0,
            "avatar_type":1
          }
        },
        "topic_type":"NORMAL",
        "attached_info_bytes":"OqsBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYAiIFMTc0NjkqCDE5NjAyNDkySgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCmAEAoAEIqAEAsAEBuAEA0AGQuvfuBOgBjyeAAgG4AgCKAwCSAxMxNDMzNTU3Mjk3ODY4NDQ3NzQ0mgMAogMJMTAxXzNfMi4wqgMA"
      },
      "index":8,
      "id":"19602492"
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"也许有很多同学上过 c/c++ 的课后，可以完成一些简单的编程练习，又能在一些网站刷题，但对于如何开发有实际用途的程序可能感到束手无策。本教程希望能以一个简单的项目开发形式，让同学能逐步理解如何从无到有去开发软件。 为什么选择 \u003cem\u003ejson\u003c/em\u003e？因为它足够简…",
        "title":"从零开始的 \u003cem\u003eJSON\u003c/em\u003e 库教程"
      },
      "object":{
        "id":"22457315",
        "title":"从零开始的 \u003cem\u003eJSON\u003c/em\u003e 库教程",
        "type":"article",
        "url":"https://api.zhihu.com/articles/22457315",
        "excerpt":"也许有很多同学上过 c/c++ 的课后，可以完成一些简单的编程练习，又能在一些网站刷题，但对于如何开发有实际用途的程序可能感到束手无策。本教程希望能以一个简单的项目开发形式，让同学能逐步理解如何从无到有去开发软件。 为什么选择 \u003cem\u003ejson\u003c/em\u003e？因为它足够简…",
        "voteup_count":2806,
        "comment_count":103,
        "created_time":1473915101,
        "updated_time":1527484067,
        "content":"\u003cp data-pid=\"KQwf2PhZ\"\u003e也许有很多同学上过 C/C++ 的课后，可以完成一些简单的编程练习，又能在一些网站刷题，但对于如何开发有实际用途的程序可能感到束手无策。本教程希望能以一个简单的项目开发形式，让同学能逐步理解如何从无到有去开发软件。\u003c/p\u003e\u003cp data-pid=\"I-oxnBBv\"\u003e为什么选择 JSON？因为它足够简单，除基本编程外不需大量技术背景知识。JSON 有标准，可按照标准逐步实现。JSON 也是实际在许多应用上会使用的格式，所以才会有大量的开源库。\u003c/p\u003e\u003cp data-pid=\"yYrx41dI\"\u003e这是一个免费、\u003ca href=\"https://link.zhihu.com/?target=https%3A//github.com/miloyip/json-tutorial\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003e开源的教程\u003c/a\u003e，如果你喜欢，也可以打赏鼓励。因为工作及家庭因素，不能保证每篇文章的首发时间，请各位见谅。\u003c/p\u003e\u003cp data-pid=\"FQ65MtfR\"\u003e（题图 \u003ca href=\"https://link.zhihu.com/?target=https%3A//unsplash.com/photos/nyghAPuJQC8\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003ePhoto by Carl Cerstrand\u003c/a\u003e）\u003c/p\u003e\u003chr/\u003e\u003ch2\u003e对象与目标\u003c/h2\u003e\u003cp data-pid=\"DLJdCnss\"\u003e教程对象：学习过基本 C/C++ 编程的同学。\u003c/p\u003e\u003cp data-pid=\"JT0oSR1T\"\u003e通过这个教程，同学可以了解如何从零开始写一个 JSON 库，其特性如下：\u003c/p\u003e\u003cul\u003e\u003cli data-pid=\"jzaCD4zS\"\u003e符合标准的 JSON 解析器和生成器\u003c/li\u003e\u003cli data-pid=\"fcolHOqy\"\u003e手写的递归下降解析器（recursive descent parser）\u003c/li\u003e\u003cli data-pid=\"oZVv1O-o\"\u003e使用标准 C 语言（C89）\u003c/li\u003e\u003cli data-pid=\"hPAMAsXs\"\u003e跨平台／编译器（如 Windows／Linux／OS X，vc／gcc／clang）\u003c/li\u003e\u003cli data-pid=\"5aob3zn7\"\u003e仅支持 UTF-8 JSON 文本\u003c/li\u003e\u003cli data-pid=\"xnUnf3Bx\"\u003e仅支持以 double 存储 JSON number 类型\u003c/li\u003e\u003cli data-pid=\"93vQEqQ4\"\u003e解析器和生成器的代码合共少于 500 行\u003c/li\u003e\u003c/ul\u003e\u003cp data-pid=\"v5mCSJ3r\"\u003e除了围绕 JSON 作为例子，希望能在教程中讲述一些课题：\u003c/p\u003e\u003cul\u003e\u003cli data-pid=\"A6n4RSER\"\u003e测试驱动开发（test driven development, TDD）\u003c/li\u003e\u003cli data-pid=\"ZwPfIzDz\"\u003eC 语言编程风格\u003c/li\u003e\u003cli data-pid=\"ipmk_Pbz\"\u003e数据结构\u003c/li\u003e\u003cli data-pid=\"ww-8F49z\"\u003eAPI 设计\u003c/li\u003e\u003cli data-pid=\"nljiDgwi\"\u003e断言\u003c/li\u003e\u003cli data-pid=\"aax5ELYw\"\u003eUnicode\u003c/li\u003e\u003cli data-pid=\"dMks6m0s\"\u003e浮点数\u003c/li\u003e\u003cli data-pid=\"b4_VB2Pa\"\u003eGithub、CMake、valgrind、Doxygen 等工具\u003c/li\u003e\u003c/ul\u003e\u003chr/\u003e\u003ch2\u003e教程大纲\u003c/h2\u003e\u003cp data-pid=\"6aAvY71U\"\u003e本教程预计分为 9 个单元，第 1-8 个单元附带练习和解答。\u003c/p\u003e\u003col\u003e\u003cli data-pid=\"g7-757EC\"\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/22460835\" class=\"internal\"\u003e启程\u003c/a\u003e（2016/9/15 完成）：编译环境、JSON 简介、测试驱动开发、解析器主要函数及各数据结构。练习 JSON 布尔类型的解析。\u003ca href=\"https://zhuanlan.zhihu.com/p/22482061\" class=\"internal\"\u003e启程解答篇\u003c/a\u003e（2016/9/17 完成）。\u003c/li\u003e\u003cli data-pid=\"UYYdfuTT\"\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/22497369\" class=\"internal\"\u003e解析数字\u003c/a\u003e（2016/9/18 完成）：JSON number 的语法。练习 JSON number 类型的校验。\u003ca href=\"https://zhuanlan.zhihu.com/p/22538880\" class=\"internal\"\u003e解析数字解答篇\u003c/a\u003e（2016/9/20 完成）\u003c/li\u003e\u003cli data-pid=\"rnm1jazQ\"\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/22566705\" class=\"internal\"\u003e解析字符串\u003c/a\u003e（2016/9/22 完成）：使用 union 存储 variant、自动扩展的堆栈、JSON string 的语法、valgrind。练习最基本的 JSON string 类型的解析、内存释放。\u003ca href=\"https://zhuanlan.zhihu.com/p/22664202\" class=\"internal\"\u003e解析字符串解答篇 \u003c/a\u003e（2016/9/27 完成）\u003c/li\u003e\u003cli data-pid=\"fGRQtbPL\"\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/22731540\" class=\"internal\"\u003eUnicode\u003c/a\u003e（2016/10/2 完成）：Unicode 和 UTF-8 的基本知识、JSON string 的 unicode 处理。练习完成 JSON string 类型的解析。\u003ca href=\"https://zhuanlan.zhihu.com/p/22784011\" class=\"internal\"\u003eUnicode 解答篇\u003c/a\u003e（2016/10/6 完成）\u003c/li\u003e\u003cli data-pid=\"T7VW2Qtn\"\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/22804068\" class=\"internal\"\u003e解析数组\u003c/a\u003e（2016/10/8 完成）：JSON array 的语法。练习完成 JSON array 类型的解析、相关内存释放。\u003ca href=\"https://zhuanlan.zhihu.com/p/22924642\" class=\"internal\"\u003e解析数组解答篇\u003c/a\u003e（2016/10/13 完成）\u003c/li\u003e\u003cli data-pid=\"7R3Dt299\"\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/23288484\" class=\"internal\"\u003e解析对象\u003c/a\u003e（2016/10/29 完成）：JSON object 的语法、重构 string 解析函数。练习完成 JSON object 的解析、相关内存释放。\u003ca href=\"https://zhuanlan.zhihu.com/p/23681202\" class=\"internal\"\u003e解析对象解答篇\u003c/a\u003e（2016/11/15 完成）\u003c/li\u003e\u003cli data-pid=\"UbVPU0eB\"\u003e\u003ca href=\"https://zhuanlan.zhihu.com/p/24466402\" class=\"internal\"\u003e生成器\u003c/a\u003e（2016/12/20 完成）：JSON 生成过程、注意事项。练习完成 JSON 生成器。\u003ca href=\"https://zhuanlan.zhihu.com/p/24729153\" class=\"internal\"\u003e生成器解答篇\u003c/a\u003e（2017/1/6 完成）\u003c/li\u003e\u003cli data-pid=\"AJwbYcmn\"\u003e访问：JSON array／object 的访问及修改。练习完成相关功能。\u003c/li\u003e\u003cli data-pid=\"QO9gQ4jy\"\u003e终点及新开始：加入 nativejson-benchmark 测试，与 RapidJSON 对比及展望。\u003cbr/\u003e\u003c/li\u003e\u003c/ol\u003e\u003chr/\u003e\u003ch2\u003e关于作者\u003c/h2\u003e\u003cp data-pid=\"_IwfEmBM\"\u003e叶劲峰（Milo Yip）现任腾讯 T4 专家、互动娱乐事业群魔方工作室群前台技术总监。他获得香港大学认知科学学士（BCogSc）、香港中文大学系统工程及工程管理哲学硕士（MPhil）。他是《游戏引擎架构》译者、《C++ Primer 中文版（第五版）》审校。他曾参与《天涯明月刀》、《斗战神》、《爱丽丝：疯狂回归》、《美食从天降》、《王子传奇》等游戏项目，以及多个游戏引擎及中间件的研发。他是开源项目 \u003ca href=\"https://link.zhihu.com/?target=https%3A//github.com/miloyip/rapidjson\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003eRapidJSON\u003c/a\u003e 的作者，开发 \u003ca href=\"https://link.zhihu.com/?target=https%3A//github.com/miloyip/nativejson-benchmark\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003enativejson-benchmark\u003c/a\u003e 比较 41 个开源原生 JSON 库的标准符合程度及性能。他在 1990 年学习 C 语言，1995 年开始使用 C++ 于各种项目。\u003c/p\u003e",
        "thumbnail_info":{
          "count":1,
          "thumbnails":[
            {
              "data_url":"",
              "url":"https://pic1.zhimg.com/80/678d17964cdc8abb6e2303e01e65cfba_qhd.jpg?source=4e949a73",
              "type":"image",
              "width":0,
              "height":0
            }
          ],
          "type":"",
          "total_count":0
        },
        "author":{
          "id":"1e2c9261b85996ccc3c5436850127e33",
          "url_token":"miloyip",
          "name":"Milo Yip",
          "headline":"游戏程序员、《游戏引擎架构》译者",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/1e2c9261b85996ccc3c5436850127e33",
          "type":"people",
          "avatar_url":"https://pic1.zhimg.com/50/v2-041d584bebcc5a34e709f2af38c654c9_l.jpg?source=4e949a73",
          "badge":[

          ],
          "authority_info":null,
          "voteup_count":358404,
          "follower_count":304343,
          "badge_v2":{
            "title":"2016 新知答主",
            "merged_badges":[

            ],
            "detail_badges":[
              {
                "type":"reward",
                "detail_type":"honored_vip",
                "title":"新知答主",
                "description":"2016 新知答主",
                "url":"",
                "sources":[
                  {
                    "id":"2016",
                    "token":"",
                    "type":"year",
                    "url":"",
                    "name":"",
                    "avatar_path":"",
                    "avatar_url":"",
                    "description":"",
                    "priority":2016
                  }
                ],
                "icon":"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
                "night_icon":"https://pic4.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
              }
            ],
            "icon":"",
            "night_icon":""
          },
          "badge_v2_string":"{\"title\":\"2016 新知答主\",\"merged_badges\":[],\"detail_badges\":[{\"type\":\"reward\",\"detail_type\":\"honored_vip\",\"title\":\"新知答主\",\"description\":\"2016 新知答主\",\"url\":\"\",\"sources\":[{\"id\":\"2016\",\"token\":\"\",\"type\":\"year\",\"url\":\"\",\"name\":\"\",\"avatar_path\":\"\",\"avatar_url\":\"\",\"description\":\"\",\"priority\":2016}],\"icon\":\"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic4.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"}],\"icon\":\"\",\"night_icon\":\"\"}"
        },
        "voting":0,
        "relationship":{
          "is_voted":false,
          "is_author":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "flag":null,
        "is_zhi_plus":false,
        "extra":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OrABCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYByIHMTE2Nzc5MCoIMjI0NTczMTVKBGpzb25QAFgBYAFqBGpzb25wBIABp7yiqJ6i9QKYAQCgAQmoAQCwAQG4AQDQAd3R6L4F2AH2FeABZ4ACAbgCAIoDAJIDEzE0MzM1NTcyOTc4Njg0NDc3NDSaAwCiAwkxMDFfM18yLjCqAwA=",
        "content_tags":null
      },
      "index":9
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"本文是 《从零开始的 \u003cem\u003ejson\u003c/em\u003e 库教程》 的第一个单元。教程练习源代码位于 \u003cem\u003ejson\u003c/em\u003e-tutorial 。 本单元内容： \u003cem\u003ejson\u003c/em\u003e 是什么 搭建编译环境 头文件与 api 设计 \u003cem\u003ejson\u003c/em\u003e 语法子集 单元测试 宏的编写技巧 实现解析器 关于断言 总结与练习 常见问答",
        "title":"从零开始的 \u003cem\u003eJSON\u003c/em\u003e 库教程（一）：启程"
      },
      "object":{
        "id":"22460835",
        "title":"从零开始的 \u003cem\u003eJSON\u003c/em\u003e 库教程（一）：启程",
        "type":"article",
        "url":"https://api.zhihu.com/articles/22460835",
        "excerpt":"本文是 《从零开始的 \u003cem\u003ejson\u003c/em\u003e 库教程》 的第一个单元。教程练习源代码位于 \u003cem\u003ejson\u003c/em\u003e-tutorial 。 本单元内容： \u003cem\u003ejson\u003c/em\u003e 是什么 搭建编译环境 头文件与 api 设计 \u003cem\u003ejson\u003c/em\u003e 语法子集 单元测试 宏的编写技巧 实现解析器 关于断言 总结与练习 常见问答",
        "voteup_count":1263,
        "comment_count":190,
        "created_time":1473946333,
        "updated_time":1474300506,
        "content":"\u003cp data-pid=\"eet1HRrj\"\u003e本文是\u003ca href=\"https://zhuanlan.zhihu.com/json-tutorial\" class=\"internal\"\u003e《从零开始的 JSON 库教程》\u003c/a\u003e的第一个单元。教程练习源代码位于 \u003ca href=\"https://link.zhihu.com/?target=https%3A//github.com/miloyip/json-tutorial\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003ejson-tutorial\u003c/a\u003e。\u003cbr/\u003e\u003c/p\u003e\u003cbr/\u003e\u003cp data-pid=\"7vtG6chN\"\u003e本单元内容：\u003cbr/\u003e\u003c/p\u003e\u003col\u003e\u003cli data-pid=\"cYXRDEKr\"\u003eJSON 是什么\u003cbr/\u003e\u003c/li\u003e\u003cli data-pid=\"yiYKhxnm\"\u003e搭建编译环境\u003cbr/\u003e\u003c/li\u003e\u003cli data-pid=\"Ugf0FEHY\"\u003e头文件与 API 设计\u003cbr/\u003e\u003c/li\u003e\u003cli data-pid=\"0-6apzwX\"\u003eJSON 语法子集\u003cbr/\u003e\u003c/li\u003e\u003cli data-pid=\"Z9h5SdI2\"\u003e单元测试\u003cbr/\u003e\u003c/li\u003e\u003cli data-pid=\"fGOwGMRX\"\u003e宏的编写技巧\u003cbr/\u003e\u003c/li\u003e\u003cli data-pid=\"WCqFr3lq\"\u003e实现解析器\u003cbr/\u003e\u003c/li\u003e\u003cli data-pid=\"kdnBJdV7\"\u003e关于断言\u003cbr/\u003e\u003c/li\u003e\u003cli data-pid=\"fqiMIEz9\"\u003e总结与练习\u003cbr/\u003e\u003c/li\u003e\u003cli data-pid=\"tzoQyW1W\"\u003e常见问答\u003cbr/\u003e\u003c/li\u003e\u003c/ol\u003e\u003cbr/\u003e\u003cp data-pid=\"7zOjj0iu\"\u003e（题图 \u003ca href=\"https://link.zhihu.com/?target=https%3A//unsplash.com/search/lantern%3Fphoto%3DLkHXBKpwhZ8\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003ePhoto by Gianandrea Villa\u003c/a\u003e）\u003cbr/\u003e\u003c/p\u003e\u003ch1\u003e1. JSON 是什么\u003c/h1\u003e\u003cp data-pid=\"Tr0A5j5g\"\u003eJSON（JavaScript Object Notation）是一个用于数据交换的文本格式，现时的标准为\u003ca href=\"https://link.zhihu.com/?target=http%3A//www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003eECMA-404\u003c/a\u003e。\u003c/p\u003e\u003cp data-pid=\"se4FJVgW\"\u003e虽然 JSON 源至于 JavaScript 语言，但它只是一种数据格式，可用于任何编程语言。现时具类似功能的格式有 XML、YAML，当中以 JSON 的语法最为简单。\u003c/p\u003e\u003cp data-pid=\"SQmKsSbY\"\u003e例如，一个动态网页想从服务器获得数据时，服务器从数据库查找数据，然后把数据转换成 JSON 文本格式：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Design Patterns\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;subtitle\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Elements of Reusable Object-Oriented Software\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;author\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\u0026#34;Erich Gamma\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\u0026#34;Richard Helm\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\u0026#34;Ralph Johnson\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"s2\"\u003e\u0026#34;John Vlissides\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e],\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;year\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e2009\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;weight\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.8\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;hardcover\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;publisher\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;Company\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Pearson Education\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nt\"\u003e\u0026#34;Country\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;India\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026#34;website\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003enull\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"Ft1fUhLH\"\u003e网页的脚本代码就可以把此 JSON 文本解析为内部的数据结构去使用。\u003c/p\u003e\u003cp data-pid=\"gJOJsVIH\"\u003e从此例子可看出，JSON 是树状结构，而 JSON 只包含 6 种数据类型：\u003c/p\u003e\u003cul\u003e\u003cli data-pid=\"a8baBXL3\"\u003enull: 表示为 null\u003c/li\u003e\u003cli data-pid=\"FfFnzz25\"\u003eboolean: 表示为 true 或 false\u003c/li\u003e\u003cli data-pid=\"0Fm2TpWC\"\u003enumber: 一般的浮点数表示方式，在下一单元详细说明\u003c/li\u003e\u003cli data-pid=\"STbJLziK\"\u003estring: 表示为 \u0026#34;...\u0026#34;\u003c/li\u003e\u003cli data-pid=\"BrFzmH-L\"\u003earray: 表示为 [ ... ]\u003c/li\u003e\u003cli data-pid=\"br8bYMzs\"\u003eobject: 表示为 { ... }\u003c/li\u003e\u003c/ul\u003e\u003cp data-pid=\"gzmU_MT_\"\u003e我们要实现的 JSON 库，主要是完成 3 个需求：\u003c/p\u003e\u003col\u003e\u003cli data-pid=\"J6l0S3Zw\"\u003e把 JSON 文本解析为一个树状数据结构（parse）。\u003c/li\u003e\u003cli data-pid=\"28_lFdR7\"\u003e提供接口访问该数据结构（access）。\u003c/li\u003e\u003cli data-pid=\"U9mkwU6P\"\u003e把数据结构转换成 JSON 文本（stringify）。\u003c/li\u003e\u003c/ol\u003e\u003cfigure\u003e\u003cimg src=\"https://pic2.zhimg.com/75eecb0312e129d64dd3b028e1479e3d_b.png\" data-rawwidth=\"440\" data-rawheight=\"78\" class=\"origin_image zh-lightbox-thumb\" width=\"440\" data-original=\"https://pic2.zhimg.com/75eecb0312e129d64dd3b028e1479e3d_r.jpg\"/\u003e\u003c/figure\u003e\u003cp data-pid=\"8RcpUpZX\"\u003e我们会逐步实现这些需求。在本单元中，我们只实现最简单的 null 和 boolean 解析。\u003c/p\u003e\u003ch1\u003e2. 搭建编译环境\u003c/h1\u003e\u003cp data-pid=\"5yHiutkJ\"\u003e我们要做的库是跨平台、跨编译器的，同学可使用任意平台进行练习。\u003c/p\u003e\u003cp data-pid=\"9lt8nNiq\"\u003e练习源代码位于 \u003ca href=\"https://link.zhihu.com/?target=https%3A//github.com/miloyip/json-tutorial\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003ejson-tutorial\u003c/a\u003e，当中 tutorial01 为本单元的练习代码。建议同学登记为 GitHub 用户，把项目 fork 一个自己的版本，然后在上面进行修改。不了解版本管理的同学，也可以按右方「Clone or download」按钮，简单下载一个 zip 文件。\u003c/p\u003e\u003cp data-pid=\"UfnT7qMi\"\u003e我们的 JSON 库名为 leptjson，代码文件只有 3 个：\u003c/p\u003e\u003col\u003e\u003cli data-pid=\"XEiVrnFn\"\u003eleptjson.h：leptjson 的头文件（header file），含有对外的类型和 API 函数声明。\u003c/li\u003e\u003cli data-pid=\"trspmx-B\"\u003eleptjson.c：leptjson 的实现文件（implementation file），含有内部的类型声明和函数实现。此文件会编译成库。\u003c/li\u003e\u003cli data-pid=\"aXg8cP6r\"\u003etest.c：我们使用测试驱动开发（test driven development, TDD）。此文件包含测试程序，需要链接 leptjson 库。\u003c/li\u003e\u003c/ol\u003e\u003cp data-pid=\"emrKkZFp\"\u003e为了方便跨平台开发，我们会使用一个现时最流行的软件配置工具 \u003ca href=\"https://link.zhihu.com/?target=https%3A//cmake.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003eCMake\u003c/a\u003e。\u003c/p\u003e\u003cp data-pid=\"Qfp-U4Og\"\u003e在 Windows 下，下载安装 CMake 后，可以使用其 cmake-gui 程序：\u003c/p\u003e\u003cfigure\u003e\u003cimg src=\"https://pic1.zhimg.com/21f02788e591b73865a087b7775b8fcc_b.png\" data-rawwidth=\"663\" data-rawheight=\"420\" class=\"origin_image zh-lightbox-thumb\" width=\"663\" data-original=\"https://pic1.zhimg.com/21f02788e591b73865a087b7775b8fcc_r.jpg\"/\u003e\u003c/figure\u003e\u003cp data-pid=\"4byrwGaq\"\u003e先在 \u0026#34;Where is the source code\u0026#34; 选择 json-tutorial/tutorial01，再在 \u0026#34;Where to build the binary\u0026#34; 键入上一个目录加上 /build。\u003c/p\u003e\u003cp data-pid=\"sXhm1zdw\"\u003e按 Configure，选择编译器，然后按 Generate 便会生成 Visual Studio 的 .sln 和 .vcproj 等文件。注意这个 build 目录都是生成的文件，可以随时删除，也不用上传至仓库。\u003c/p\u003e\u003cp data-pid=\"4nfS1rN2\"\u003e在 OS X 下，建议安装 \u003ca href=\"https://link.zhihu.com/?target=http%3A//brew.sh/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003eHomebrew\u003c/a\u003e，然后在命令行键入：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ brew install cmake\n$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e github/json-tutorial/tutorial01\n$ mkdir build\n$ \u003cspan class=\"nb\"\u003ecd\u003c/span\u003e build\n$ cmake -DCMAKE_BUILD_TYPE\u003cspan class=\"o\"\u003e=\u003c/span\u003eDebug ..\n$ make\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"m1niXG62\"\u003e这样会使用 GNU make 来生成项目，把 Debug 改成 Release 就会生成 Release 配置的 makefile。\u003c/p\u003e\u003cp data-pid=\"tBZV75o7\"\u003e若你喜欢的话，CMake 也可以生成 Xcode 项目：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ cmake -G Xcode ..\n$ open leptjson_test.xcodeproj\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"_0cYKNmU\"\u003e而在 Ubuntu 下，可使用 apt-get 来安装：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ apt-get install cmake\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"1B2jlea_\"\u003e无论使用什么平台及编译环境，编译运行后会出现：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-bash\"\u003e$ ./leptjson_test\n/Users/miloyip/github/json-tutorial/tutorial01/test.c:56: expect: \u003cspan class=\"m\"\u003e3\u003c/span\u003e actual: \u003cspan class=\"m\"\u003e0\u003c/span\u003e\n11/12 \u003cspan class=\"o\"\u003e(\u003c/span\u003e91.67%\u003cspan class=\"o\"\u003e)\u003c/span\u003e passed\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"Iq7yLHKb\"\u003e若看到类似以上的结果，说明已成功搭建编译环境，我们可以去看看那几个代码文件的内容了。\u003c/p\u003e\u003ch1\u003e3. 头文件与 API 设计\u003c/h1\u003e\u003cp data-pid=\"hdqm4i1C\"\u003eC 语言有头文件的概念，需要使用 #include 去引入头文件中的类型声明和函数声明。但由于头文件也可以 #include 其他头文件，为避免重复声明，通常会利用宏加入 #include 防范（include guard）：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"cp\"\u003e#ifndef LEPTJSON_H__\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e#define LEPTJSON_H__\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/* ... */\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#endif \u003c/span\u003e\u003cspan class=\"cm\"\u003e/* LEPTJSON_H__ */\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"2A3fhAh-\"\u003e宏的名字必须是唯一的，通常习惯以 _\u003cem\u003eH__\u003c/em\u003e 作为后缀。由于 leptjson 只有一个头文件，可以简单命名为 LEPTJSON_H__。如果项目有多个文件或目录结构，可以用 项目名称_目录_文件名称_H__ 这种命名方式。\u003c/p\u003e\u003cp data-pid=\"nHjJSXc0\"\u003e如前所述，JSON 中有 6 种数据类型，如果把 true 和 false 当作两个类型就是 7 种，我们为此声明一个枚举类型（enumeration type）：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_NULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_FALSE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_TRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_NUMBER\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_STRING\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_ARRAY\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_OBJECT\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"n\"\u003elept_type\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"dZDADniu\"\u003e因为 C 语言没有 C++ 的命名空间（namespace）功能，一般会使用项目的简写作为标识符的前缀。通常枚举值用全大写（如 LEPT_NULL），而类型及函数则用小写（如 lept_type）。\u003c/p\u003e\u003cp data-pid=\"9zJbRLBX\"\u003e接下来，我们声明 JSON 的数据结构。JSON 是一个树形结构，我们最终需要实现一个树的数据结构，每个节点使用 lept_value 结构体表示，我们会称它为一个 JSON 值（JSON value）。 在此单元中，我们只需要实现 null, true 和 false 的解析，因此该结构体只需要存储一个 lept_type。之后的单元会逐步加入其他数据。\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elept_type\u003c/span\u003e \u003cspan class=\"n\"\u003etype\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"n\"\u003elept_value\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"K9_Y-FjT\"\u003eC 语言的结构体是以 struct X {} 形式声明的，定义变量时也要写成 struct X x;。为方便使用，上面的代码使用了 typedef。\u003c/p\u003e\u003cp data-pid=\"ZXcvjYRp\"\u003e然后，我们现在只需要两个 API 函数，一个是解析 JSON：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003elept_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elept_value\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"-XNRHHG3\"\u003e传入的 JSON 文本是一个 C 字符串（空结尾字符串／null-terminated string），由于我们不应该改动这个输入字符串，所以使用 const char* 类型。\u003c/p\u003e\u003cp data-pid=\"ZBUengmg\"\u003e另一注意点是，传入的根节点指针 v 是由使用方负责分配的，所以一般用法是：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"n\"\u003elept_value\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e[]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e...;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003elept_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"zztI0uWd\"\u003e返回值是以下这些枚举值，无错误会返回 LEPT_PARSE_OK，其他值在下节解释。\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"k\"\u003eenum\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLEPT_PARSE_OK\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLEPT_PARSE_EXPECT_VALUE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLEPT_PARSE_INVALID_VALUE\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eLEPT_PARSE_ROOT_NOT_SINGULAR\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"c9R1WL_A\"\u003e现时我们只需要一个访问结果的函数，就是获取其类型：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cmake\"\u003e\u003cspan class=\"err\"\u003elept_type\u003c/span\u003e \u003cspan class=\"nb\"\u003elept_get_type\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003econst\u003c/span\u003e \u003cspan class=\"s\"\u003elept_value*\u003c/span\u003e \u003cspan class=\"s\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"err\"\u003e;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1\u003e4. JSON 语法子集\u003c/h1\u003e\u003cp data-pid=\"915W--ic\"\u003e下面是此单元的 JSON 语法子集，使用 \u003ca href=\"https://link.zhihu.com/?target=http%3A//rfc7159.net/rfc7159\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003eRFC7159\u003c/a\u003e 中的 \u003ca href=\"https://link.zhihu.com/?target=https%3A//tools.ietf.org/html/rfc5234\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003eABNF\u003c/a\u003e 表示：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003eJSON-text = ws value ws\nws = *(%x20 / %x09 / %x0A / %x0D)\nvalue = null / false / true \nnull  = \u0026#34;null\u0026#34;\nfalse = \u0026#34;false\u0026#34;\ntrue  = \u0026#34;true\u0026#34;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"oQfWx3nx\"\u003e当中 %xhh 表示以 16 进制表示的字符，/ 是多选一，* 是零或多个，( ) 用于分组。\u003c/p\u003e\u003cp data-pid=\"r9ngGm89\"\u003e那么第一行的意思是，JSON 文本由 3 部分组成，首先是空白（whitespace），接着是一个值，最后是空白。\u003c/p\u003e\u003cp data-pid=\"6Lsuo2B8\"\u003e第二行告诉我们，所谓空白，是由零或多个空格符（space U+0020）、制表符（tab U+0009）、换行符（LF U+000A）、回车符（CR U+000D）所组成。\u003c/p\u003e\u003cp data-pid=\"J9oy-hfl\"\u003e第三行是说，我们现时的值只可以是 null、false 或 true，它们分别有对应的字面值（literal）。\u003c/p\u003e\u003cp data-pid=\"SX2ejm-N\"\u003e我们的解析器应能判断输入是否一个合法的 JSON。如果输入的 JSON 不合符这个语法，我们要产生对应的错误码，方便使用者追查问题。\u003c/p\u003e\u003cp data-pid=\"KUWEuk7Q\"\u003e在这个 JSON 语法子集下，我们定义 3 种错误码：\u003c/p\u003e\u003cul\u003e\u003cli data-pid=\"t07qQhyW\"\u003e若一个 JSON 只含有空白，传回 LEPT_PARSE_EXPECT_VALUE。\u003c/li\u003e\u003cli data-pid=\"teIYSqp5\"\u003e若一个值之后，在空白之后还有其他字符，传回 LEPT_PARSE_ROOT_NOT_SINGULAR。\u003c/li\u003e\u003cli data-pid=\"eCdtaYO3\"\u003e若值不是那三种字面值，传回 LEPT_PARSE_INVALID_VALUE。\u003c/li\u003e\u003c/ul\u003e\u003ch1\u003e5. 单元测试\u003c/h1\u003e\u003cp data-pid=\"1TBolkgv\"\u003e许多同学在做练习或刷题时，都是以 printf／cout 打印结果，再用肉眼对比结果是否乎合预期。但当软件项目越来越复杂，这个做法会越来越低效。一般我们会采用自动的测试方式，例如单元测试（unit testing）。单元测试也能确保其他人修改代码后，原来的功能维持正确（这称为回归测试／regression testing）。\u003c/p\u003e\u003cp data-pid=\"itfiHEhv\"\u003e常用的单元测试框架有 xUnit 系列，如 C++ 的 \u003ca href=\"https://link.zhihu.com/?target=https%3A//github.com/google/googletest\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003eGoogle Test\u003c/a\u003e、C# 的 \u003ca href=\"https://link.zhihu.com/?target=http%3A//www.nunit.org/\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003eNUnit\u003c/a\u003e。我们为了简单起见，会编写一个极简单的单元测试方式。\u003c/p\u003e\u003cp data-pid=\"fhYGZxQw\"\u003e一般来说，软件开发是以周期进行的。例如，加入一个功能，再写关于该功能的单元测试。但也有另一种软件开发方法论，称为测试驱动开发（test-driven development, TDD），它的主要循环步骤是：\u003c/p\u003e\u003col\u003e\u003cli data-pid=\"VRVoQqBm\"\u003e加入一个测试。\u003c/li\u003e\u003cli data-pid=\"woF6XGZM\"\u003e运行所有测试，新的测试应该会失败。\u003c/li\u003e\u003cli data-pid=\"ZC-0kJgQ\"\u003e编写实现代码。\u003c/li\u003e\u003cli data-pid=\"-xAxFu1U\"\u003e运行所有测试，若有测试失败回到3。\u003c/li\u003e\u003cli data-pid=\"trKpu_I4\"\u003e重构代码。\u003c/li\u003e\u003cli data-pid=\"0YwzacuW\"\u003e回到 1。\u003c/li\u003e\u003c/ol\u003e\u003cp data-pid=\"p4KtJ1AW\"\u003eTDD 是先写测试，再实现功能。好处是实现只会刚好满足测试，而不会写了一些不需要的代码，或是没有被测试的代码。\u003c/p\u003e\u003cp data-pid=\"G0aeWFrG\"\u003e但无论我们是采用 TDD，或是先实现后测试，都应尽量加入足够覆盖率的单元测试。\u003c/p\u003e\u003cp data-pid=\"XLdE-wU3\"\u003e回到 leptjson 项目，test.c 包含了一个极简的单元测试框架：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdio.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;stdlib.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026lt;string.h\u0026gt;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026#34;leptjson.h\u0026#34;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003emain_ret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etest_count\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003etest_pass\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cp\"\u003e#define EXPECT_EQ_BASE(equality, expect, actual, format) \\\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e    do {\\\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e        test_count++;\\\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e        if (equality)\\\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e            test_pass++;\\\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e        else {\\\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e            fprintf(stderr, \u0026#34;%s:%d: expect: \u0026#34; format \u0026#34; actual: \u0026#34; format \u0026#34;\\n\u0026#34;, __FILE__, __LINE__, expect, actual);\\\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e            main_ret = 1;\\\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e        }\\\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e    } while(0)\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003cspan class=\"cp\"\u003e#define EXPECT_EQ_INT(expect, actual) EXPECT_EQ_BASE((expect) == (actual), expect, actual, \u0026#34;%d\u0026#34;)\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003etest_parse_null\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elept_value\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_TRUE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEXPECT_EQ_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLEPT_PARSE_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elept_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;null\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEXPECT_EQ_INT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eLEPT_NULL\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elept_get_type\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e));\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* ... */\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003etest_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etest_parse_null\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"cm\"\u003e/* ... */\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003emain\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003etest_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eprintf\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;%d/%d (%3.2f%%) passed\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etest_pass\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etest_count\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003etest_pass\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"mf\"\u003e100.0\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"n\"\u003etest_count\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003emain_ret\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"jDguwtNu\"\u003e现时只提供了一个 EXPECT_EQ_INT(expect, actual) 的宏，每次使用这个宏时，如果 expect != actual（预期值不等于实际值），便会输出错误信息。 若按照 TDD 的步骤，我们先写一个测试，如上面的 test_parse_null()，而 lept_parse() 只返回 LEPT_PARSE_OK：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003e/Users/miloyip/github/json-tutorial/tutorial01/test.c:27: expect: 0 actual: 1\n1/2 (50.00%) passed\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"Na1Ak4RJ\"\u003e第一个返回 LEPT_PARSE_OK，所以是通过的。第二个测试因为 lept_parse() 没有把 v.type 改成 LEPT_NULL，造成失败。我们再实现 lept_parse() 令到它能通过测试。\u003c/p\u003e\u003cp data-pid=\"qdyAmUDu\"\u003e然而，完全按照 TDD 的步骤来开发，是会减慢开发进程。所以我个人会在这两种极端的工作方式取平衡。通常会在设计 API 后，先写部分测试代码，再写满足那些测试的实现。\u003c/p\u003e\u003ch1\u003e6. 宏的编写技巧\u003c/h1\u003e\u003cp data-pid=\"oA04lePS\"\u003e有些同学可能不了解 EXPECT_EQ_BASE 宏的编写技巧，简单说明一下。反斜线代表该行未结束，会串接下一行。而如果宏里有多过一个语句（statement），就需要用 do { /*\u003cem\u003e...*\u003c/em\u003e/ } while(0) 包裹成单个语句，否则会有如下的问题：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"cp\"\u003e#define M() a(); b()\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econd\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eM\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"nf\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* 预处理后 */\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econd\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* \u0026lt;- else 缺乏对应 if */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"cnDU2ND-\"\u003e只用 {} 也不行：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"cp\"\u003e#define M() { a(); b(); }\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/* 预处理后 */\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econd\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* 最后的分号代表 if 语句结束 */\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e               \u003cspan class=\"cm\"\u003e/* else 缺乏对应 if */\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"sX_DptoZ\"\u003e用 do while 就行了：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"cp\"\u003e#define M() do { a(); b(); } while(0)\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/* 预处理后 */\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003econd\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"k\"\u003edo\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\n    \u003cspan class=\"nf\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch1\u003e7. 实现解析器\u003c/h1\u003e\u003cp data-pid=\"H4J8-okk\"\u003e有了 API 的设计、单元测试，终于要实现解析器了。\u003c/p\u003e\u003cp data-pid=\"9n3Xf2SN\"\u003e首先为了减少解析函数之间传递多个参数，我们把这些数据都放进一个 lept_context 结构体：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"k\"\u003etypedef\u003c/span\u003e \u003cspan class=\"k\"\u003estruct\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003cspan class=\"n\"\u003elept_context\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* ... */\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* 提示：这里应该是 JSON-text = ws value ws，*/\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/* 以下实现没处理最后的 ws 和 LEPT_PARSE_ROOT_NOT_SINGULAR */\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003elept_parse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elept_value\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elept_context\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ev\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"nb\"\u003eNULL\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_NULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003elept_parse_whitespace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003elept_parse_value\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"CQ_G386y\"\u003e暂时我们只储存 json 字符串当前位置，之后的单元我们需要加入更多内容。\u003c/p\u003e\u003cp data-pid=\"4wcM3hRV\"\u003elept_parse() 若失败，会把 v 设为 null 类型，所以这里先把它设为 null，让 lept_parse_value() 写入解析出来的根值。\u003c/p\u003e\u003cp data-pid=\"pVn826Z-\"\u003eleptjson 是一个手写的递归下降解析器（recursive descent parser）。由于 JSON 语法特别简单，我们不需要写分词器（tokenizer），只需检测下一个字符，便可以知道它是哪种类型的值，然后调用相关的分析函数。对于完整的 JSON 语法，跳过空白后，只需检测当前字符：\u003c/p\u003e\u003cul\u003e\u003cli data-pid=\"EGXOO9OT\"\u003en ➔ null\u003c/li\u003e\u003cli data-pid=\"55NJDrVI\"\u003et ➔ true\u003c/li\u003e\u003cli data-pid=\"OPueUfff\"\u003ef ➔ false\u003c/li\u003e\u003cli data-pid=\"KhrAc5SE\"\u003e\u0026#34; ➔ string\u003c/li\u003e\u003cli data-pid=\"ODxfoYoy\"\u003e0-9/- ➔ number\u003c/li\u003e\u003cli data-pid=\"UZMCmN49\"\u003e[ ➔ array\u003c/li\u003e\u003cli data-pid=\"A4LxJciv\"\u003e{ ➔ object\u003c/li\u003e\u003c/ul\u003e\u003cp data-pid=\"28k5wfhy\"\u003e所以，我们可以按照 JSON 语法一节的 EBNF 简单翻译成解析函数：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"cp\"\u003e#define EXPECT(c, ch) do { assert(*c-\u0026gt;json == (ch)); c-\u0026gt;json++; } while(0)\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/* ws = *(%x20 / %x09 / %x0A / %x0D) */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003elept_parse_whitespace\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elept_context\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"kt\"\u003echar\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;\\t\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;\\n\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ep\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;\\r\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ep\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* null  = \u0026#34;null\u0026#34; */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003elept_parse_null\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elept_context\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elept_value\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eEXPECT\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;n\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;u\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;l\u0026#39;\u003c/span\u003e \u003cspan class=\"o\"\u003e||\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;l\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_PARSE_INVALID_VALUE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003etype\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_NULL\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_PARSE_OK\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n\u003cspan class=\"cm\"\u003e/* value = null / false / true */\u003c/span\u003e\n\u003cspan class=\"cm\"\u003e/* 提示：下面代码没处理 false / true，将会是练习之一 */\u003c/span\u003e\n\u003cspan class=\"k\"\u003estatic\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"nf\"\u003elept_parse_value\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003elept_context\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003elept_value\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eswitch\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;n\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e  \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003elept_parse_null\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ec\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n        \u003cspan class=\"k\"\u003ecase\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39;\\0\u0026#39;\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_PARSE_EXPECT_VALUE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e   \u003cspan class=\"k\"\u003ereturn\u003c/span\u003e \u003cspan class=\"n\"\u003eLEPT_PARSE_INVALID_VALUE\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"BRaDGSmN\"\u003e由于 lept_parse_whitespace() 是不会出现错误的，返回类型为 void。其它的解析函数会返回错误码，传递至顶层。\u003c/p\u003e\u003ch1\u003e8. 关于断言\u003c/h1\u003e\u003cp data-pid=\"J4_qlIXY\"\u003e断言（assertion）是 C 语言中常用的防御式编程方式，减少编程错误。最常用的是在函数开始的地方，检测所有参数。有时候也可以在调用函数后，检查上下文是否正确。\u003c/p\u003e\u003cp data-pid=\"SmPrHs7E\"\u003eC 语言的标准库含有 assert() 这个宏（需 #include ），提供断言功能。当程序以 release 配置编译时（定义了 NDEBUG 宏），assert() 不会做检测；而当在 debug 配置时（没定义 NDEBUG 宏），则会在运行时检测 assert(cond) 中的条件是否为真（非 0），断言失败会直接令程序崩溃。\u003c/p\u003e\u003cp data-pid=\"6b3hrQuY\"\u003e初使用断言的同学，可能会把有副作用的代码放在 assert() 中：\u003c/p\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-c\"\u003e\u003cspan class=\"n\"\u003eassert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"cm\"\u003e/* 这是错误的! */\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"6YQ3Rd_J\"\u003e因为这样会导致 debug 和 release 版的行为不一样。\u003c/p\u003e\u003cp data-pid=\"H2LUYtPA\"\u003e另一个问题是，初学者可能会难于分辨何时使用断言，何时处理运行时错误（如返回错误值或在 C++ 中抛出异常）。简单的答案是，如果那个错误是由于程序员错误编码所造成的（例如传入不合法的参数），那么应用断言；如果那个错误是程序员无法避免，而是由运行时的环境所造成的，就要处理运行时错误（例如开启文件失败）。\u003c/p\u003e\u003ch1\u003e9. 总结与练习\u003c/h1\u003e\u003cp data-pid=\"PDg5tmU9\"\u003e本文介绍了如何配置一个编程环境，单元测试的重要性，以至于一个 JSON 解析器的子集实现。如果你读到这里，还未动手，建议你快点试一下。以下是本单元的练习，很容易的，但我也会在稍后发出解答篇。\u003c/p\u003e\u003col\u003e\u003cli data-pid=\"wPXUZR4N\"\u003e修正关于 LEPT_PARSE_ROOT_NOT_SINGULAR 的单元测试，若 json 在一个值之后，空白之后还有其它字符，则要返回 LEPT_PARSE_ROOT_NOT_SINGULAR。\u003c/li\u003e\u003cli data-pid=\"Xr1qJnVd\"\u003e参考 test_parse_null()，加入 test_parse_true()、test_parse_false() 单元测试。\u003c/li\u003e\u003cli data-pid=\"vl5T5nGG\"\u003e参考 lept_parse_null() 的实现和调用方，解析 true 和 false 值。\u003c/li\u003e\u003c/ol\u003e\u003ch1\u003e10. 常见问答\u003c/h1\u003e\u003col\u003e\u003cli data-pid=\"K4zvHAfc\"\u003e\u003cp data-pid=\"b9Rqp5od\"\u003e为什么把例子命名为 leptjson？\u003c/p\u003e\u003cp data-pid=\"wECFYpPF\"\u003e来自于标准模型中的轻子（lepton），意为很轻量的 JSON 库。另外，建议大家为项目命名时，先 google 一下是否够独特，有很多同名的话搜寻时难以命中。\u003c/p\u003e\u003c/li\u003e\u003cli data-pid=\"G9Aar8ag\"\u003e\u003cp data-pid=\"OsrIWd7M\"\u003e为什么使用宏而不用函数或内联函数？\u003c/p\u003e\u003cp data-pid=\"MlGBQ0Th\"\u003e因为这个测试框架使用了 __LINE__ 这个编译器提供的宏，代表编译时该行的行号。如果用函数或内联函数，每次的行号便都会相同。另外，内联函数是 C99 的新增功能，本教程使用 C89。\u003c/p\u003e\u003c/li\u003e\u003c/ol\u003e\u003cp data-pid=\"XSC5nOvK\"\u003e其他常见问答将会从评论中整理。\u003c/p\u003e",
        "thumbnail_info":{
          "count":1,
          "thumbnails":[
            {
              "data_url":"",
              "url":"https://pic3.zhimg.com/80/d68df4e9114552f2ae1e7ab5d2a1cb46_qhd.jpg?source=4e949a73",
              "type":"image",
              "width":0,
              "height":0
            }
          ],
          "type":"",
          "total_count":0
        },
        "author":{
          "id":"1e2c9261b85996ccc3c5436850127e33",
          "url_token":"miloyip",
          "name":"Milo Yip",
          "headline":"游戏程序员、《游戏引擎架构》译者",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/1e2c9261b85996ccc3c5436850127e33",
          "type":"people",
          "avatar_url":"https://pica.zhimg.com/50/v2-041d584bebcc5a34e709f2af38c654c9_l.jpg?source=4e949a73",
          "badge":[

          ],
          "authority_info":null,
          "voteup_count":358404,
          "follower_count":304343,
          "badge_v2":{
            "title":"2016 新知答主",
            "merged_badges":[

            ],
            "detail_badges":[
              {
                "type":"reward",
                "detail_type":"honored_vip",
                "title":"新知答主",
                "description":"2016 新知答主",
                "url":"",
                "sources":[
                  {
                    "id":"2016",
                    "token":"",
                    "type":"year",
                    "url":"",
                    "name":"",
                    "avatar_path":"",
                    "avatar_url":"",
                    "description":"",
                    "priority":2016
                  }
                ],
                "icon":"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
                "night_icon":"https://pic4.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
              }
            ],
            "icon":"",
            "night_icon":""
          },
          "badge_v2_string":"{\"title\":\"2016 新知答主\",\"merged_badges\":[],\"detail_badges\":[{\"type\":\"reward\",\"detail_type\":\"honored_vip\",\"title\":\"新知答主\",\"description\":\"2016 新知答主\",\"url\":\"\",\"sources\":[{\"id\":\"2016\",\"token\":\"\",\"type\":\"year\",\"url\":\"\",\"name\":\"\",\"avatar_path\":\"\",\"avatar_url\":\"\",\"description\":\"\",\"priority\":2016}],\"icon\":\"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic4.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"}],\"icon\":\"\",\"night_icon\":\"\"}"
        },
        "voting":0,
        "relationship":{
          "is_voted":false,
          "is_author":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "flag":null,
        "is_zhi_plus":false,
        "extra":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OrEBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYByIHMTE2OTIxNSoIMjI0NjA4MzVKBGpzb25QAFgBYAFqBGpzb25wBIABp7yiqJ6i9QKYAQCgAQqoAQCwAQG4AQDQAd3F6r4F2AHvCeABvgGAAgG4AgCKAwCSAxMxNDMzNTU3Mjk3ODY4NDQ3NzQ0mgMAogMJMTAxXzNfMi4wqgMA",
        "content_tags":null
      },
      "index":10
    },
    {
      "type":"search_club",
      "highlight":null,
      "object":{
        "type":"detailed",
        "name":"python入门及提高",
        "description":"致力于让更多的人学会python编程！",
        "club_id":"1159914965644759040",
        "id":"1159914965644759040",
        "attached_info_bytes":"Or0BCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYYCITMTE5MTM2NDgzNDE5NTc3OTU4NCoTMTE5MTM2NDgzNDE5NTc3OTU4NEoEanNvblAAWAFgAWoEanNvbnAEgAGnvKKonqL1ApgBAKABC6gBALABAdAB3YGo7AWAAgG4AgCKAwCSAxMxNDMzNTU3Mjk3ODY4NDQ3NzQ0mgMAogMJMTAxXzNfMi4wqgMA",
        "content_list":[
          {
            "id":"1191364834195779584",
            "attached_info_bytes":"OtIBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYYSITMTE5MTM2NDgzNDE5NTc3OTU4NCoTMTE5MTM2NDgzNDE5NTc3OTU4NDITMTE1OTkxNDk2NTY0NDc1OTA0MEoEanNvblAAWAFgAWoEanNvbnAEgAGnvKKonqL1ApgBAKABC6gBALABAdAB1tXx7wWAAgG4AgCKAwCSAxMxNDMzNTU3Mjk3ODY4NDQ3NzQ0mgMAogMJMTAxXzNfMi4wqgMA",
            "title":"求推荐解析\u003cem\u003ejson\u003c/em\u003e文本的库",
            "excerpt":"爬知乎发现好多信息在\u003cem\u003ejson\u003c/em\u003e文本里，请问解析\u003cem\u003ejson\u003c/em\u003e推荐用哪个库呢？有类似beautifulsoup, pyquery的推荐吗？ 如果能附上推荐的教程就更好了，感谢！！！",
            "thumbnail_info":null,
            "mask_name":"吟游之狼",
            "avatar_url":"https://pic2.zhimg.com/80/v2-a061e46c0042b09e0863b92a3546f0f1.jpg?source=4e949a73",
            "tag_id":"",
            "tag_name":"",
            "tag_type":"",
            "poll_info":null,
            "comment_num":5,
            "reaction_num":4,
            "created":1576823510
          }
        ],
        "members":[
          {
            "avatar_url":"https://pic2.zhimg.com/80/v2-828b216803fcd9483cf56a60ff406acd.jpg?source=4e949a73"
          },
          {
            "avatar_url":"https://pic3.zhimg.com/80/v2-aa5fd922dc0c542064910c25495b51ce.jpg?source=4e949a73"
          },
          {
            "avatar_url":"https://pic1.zhimg.com/80/v2-274206fedd69753c7b69ec19c945a786.jpg?source=4e949a73"
          }
        ],
        "avatar_url":"https://pic1.zhimg.com/80/v2-ff899ead96dbd844058b29fbdfaa2095.jpg?source=4e949a73",
        "member_count":61458,
        "club_post_count":4656,
        "pinned_club_posts":[
          {
            "id":"1187147806068981760",
            "attached_info_bytes":"OskBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYYSITMTE4NzE0NzgwNjA2ODk4MTc2MCoTMTE4NzE0NzgwNjA2ODk4MTc2MDITMTE1OTkxNDk2NTY0NDc1OTA0MEoEanNvblAAWAFgAWoEanNvbnAEgAGnvKKonqL1ApgBANAB7aa07wWAAgG4AgCKAwCSAxMxNDMzNTU3Mjk3ODY4NDQ3NzQ0mgMAogMJMTAxXzNfMi4wqgMA",
            "title":"作为科研的辅助工具，如何学习？python？",
            "excerpt":"整理了一些优质资料，分享给大家～",
            "thumbnail_info":null,
            "mask_name":"仙女座Geek悄悄地",
            "avatar_url":"https://pic1.zhimg.com/80/v2-4bb7c592a77bddb206f0eb6312ce84c7.jpg?source=4e949a73",
            "tag_id":"",
            "tag_name":"",
            "tag_type":"",
            "poll_info":null,
            "comment_num":19,
            "reaction_num":108,
            "created":1575818093
          },
          {
            "id":"1161939614607785984",
            "attached_info_bytes":"OskBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYYSITMTE2MTkzOTYxNDYwNzc4NTk4NCoTMTE2MTkzOTYxNDYwNzc4NTk4NDITMTE1OTkxNDk2NTY0NDc1OTA0MEoEanNvblAAWAFgAWoEanNvbnAEgAGnvKKonqL1ApgBANAB97zF7AWAAgG4AgCKAwCSAxMxNDMzNTU3Mjk3ODY4NDQ3NzQ0mgMAogMJMTAxXzNfMi4wqgMA",
            "title":"程序员的11层境界，你在哪一层？",
            "excerpt":"1-菜鸟 2-大虾 3-牛人 4-大牛 5-专家 6-学者 7-大师 8-科学家 9-大科学家 10-大哲 11-上帝",
            "thumbnail_info":null,
            "mask_name":"圈主Alex Cui-上海",
            "avatar_url":"https://pic2.zhimg.com/80/v2-f180af0bcc551f9b4ad8b643a184f09e.jpg?source=4e949a73",
            "tag_id":"",
            "tag_name":"",
            "tag_type":"",
            "poll_info":null,
            "comment_num":57,
            "reaction_num":15,
            "created":1569807991
          }
        ],
        "is_joined":false,
        "join_type":"all",
        "verify_question":"",
        "allow_sync":false
      },
      "index":11,
      "id":"1159914965644759040"
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"非常不一样。 \u003cem\u003eJSON\u003c/em\u003e表述的是JavaScript Object，全称JavaScript Object Notation，是一种表现方式，写成\u003cem\u003ejson\u003c/em\u003e是值只可为几类固定的可序列化类型",
        "title":"你觉得python的字典和\u003cem\u003ejson\u003c/em\u003e差不多吗？"
      },
      "object":{
        "id":"133768881",
        "type":"answer",
        "excerpt":"非常不一样。 \u003cem\u003eJSON\u003c/em\u003e表述的是JavaScript Object，全称JavaScript Object Notation，是一种表现方式，写成\u003cem\u003ejson\u003c/em\u003e是值只可为几类固定的可序列化类型",
        "url":"https://api.zhihu.com/answers/133768881",
        "voteup_count":21,
        "comment_count":5,
        "created_time":1480527801,
        "updated_time":1480527922,
        "content":"\u003cp data-pid=\"Pqx2hwQJ\"\u003e非常不一样。\u003c/p\u003e\u003cp data-pid=\"iLgNn-LT\"\u003eJSON表述的是JavaScript Object，全称JavaScript Object Notation，是一种表现方式，写成json是值只可为几类固定的可序列化类型。js里object当key的必须是字符串，value任意，访问方式可[]可.，遍历方式分in分of，因为js里的array也是个特别的object（key为连续数字），二者不分家。json对任意key存在默认值undefined。\u003c/p\u003e\u003cp data-pid=\"_oIIY74y\"\u003edict是个容器，key是任意hashable，value是任意引用，仅可下标访问，跟list没有任何共通性。dict默认情况下没有默认值。\u003c/p\u003e\u003cp data-pid=\"reVgPwkd\"\u003e这就是为毛py里有专门的json模块用来dump和load一个json。\u003c/p\u003e",
        "thumbnail_info":{
          "count":0,
          "thumbnails":[

          ],
          "type":"thumbnail_info",
          "total_count":0
        },
        "relationship":{
          "voting":0,
          "is_author":false,
          "is_thanked":false,
          "is_nothelp":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "question":{
          "id":"21097237",
          "type":"question",
          "name":"你觉得python的字典和\u003cem\u003ejson\u003c/em\u003e差不多吗？",
          "url":"https://api.zhihu.com/questions/21097237"
        },
        "author":{
          "id":"8fcc30ba267650d2a5ee8e74040a3b00",
          "url_token":"coldwings",
          "name":"Coldwings",
          "headline":"已婚人士",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/8fcc30ba267650d2a5ee8e74040a3b00",
          "type":"people",
          "avatar_url":"https://pic1.zhimg.com/50/v2-4994779222c04f836c313ced6886966e_l.jpg?source=4e949a73",
          "badge":[
            {
              "type":"best_answerer",
              "description":"优秀回答者",
              "topics":[
                {
                  "id":"19552832",
                  "name":"Python",
                  "introduction":"Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/）, 是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。Python是纯粹的自由软件， 源代码和解释器CPython遵循 GPL(GNU General Public License)协议。Python语法简洁清晰，特色之一是强制用空白符(white space)作为语句缩进。Python具有丰富和强大的库。它常被昵称为胶水语言，能够把用其他语言制作的各种模块（尤其是C/C++）很轻松地联结在一起。常见的一种应用情形是，使用Python快速生成程序的原型（有时甚至是程序的最终界面），然后对其中有特别要求的部分，用更合适的语言改写，比如3D游戏中的图形渲染模块，性能要求特别高，就可以用C/C++重写，而后封装为Python可以调用的扩展类库。需要注意的是在您使用扩展类库时可能需要考虑平台问题，某些可能不提供跨平台的实现。7月20日，IEEE发布2017年编程语言排行榜：Python高居首位。2018年3月，该语言作者在邮件列表上宣布 Python 2.7将于2020年1月1日终止支持。用户如果想要在这个日期之后继续得到与Python 2.7有关的支持，则需要付费给商业供应商。",
                  "excerpt":"Python（英国发音：/ˈpaɪθən/ 美国发音：/ˈpaɪθɑːn/）, 是一种面向对象的解释型计算机程序设计语言，由荷兰人Guido van Rossum于1989年发明，第一个公开发行版发行于1991年。Python是纯粹的自由软件， 源代码和解释器CPython遵循 GPL(GNU General Public License)协议。Python语法简洁清晰，特色之一是强制用空白符(white space)作为语句缩进。Python具有丰富和强大的库。它常被昵称为胶水语言，能够把用其他语言制作的…",
                  "type":"topic",
                  "url":"https://api.zhihu.com/topics/19552832",
                  "avatar_url":"https://pic3.zhimg.com/50/v2-1b642f312b0369f240fd6fb494f4acc9_l.jpg?source=4e949a73"
                }
              ]
            },
            {
              "type":"identity",
              "description":"已认证的机构",
              "topics":[

              ]
            }
          ],
          "authority_info":null,
          "voteup_count":44433,
          "follower_count":41782,
          "badge_v2":{
            "title":"Python话题下的优秀答主",
            "merged_badges":[
              {
                "type":"best",
                "detail_type":"best",
                "title":"优秀答主",
                "description":"Python话题下的优秀答主",
                "url":"https://www.zhihu.com/question/48509984",
                "sources":[
                  {
                    "id":"19552832",
                    "token":"19552832",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19552832",
                    "name":"Python",
                    "avatar_path":"v2-1a9bf5312114564fb132692b355b5199",
                    "avatar_url":"https://pic4.zhimg.com/v2-1a9bf5312114564fb132692b355b5199_hd.jpg",
                    "description":"",
                    "priority":0
                  }
                ],
                "icon":"",
                "night_icon":""
              }
            ],
            "detail_badges":[
              {
                "type":"best",
                "detail_type":"best_answerer",
                "title":"优秀答主",
                "description":"Python话题下的优秀答主",
                "url":"https://www.zhihu.com/question/48509984",
                "sources":[
                  {
                    "id":"19552832",
                    "token":"19552832",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19552832",
                    "name":"Python",
                    "avatar_path":"v2-1a9bf5312114564fb132692b355b5199",
                    "avatar_url":"https://pic4.zhimg.com/v2-1a9bf5312114564fb132692b355b5199_hd.jpg",
                    "description":"",
                    "priority":0
                  }
                ],
                "icon":"https://pic4.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
                "night_icon":"https://pic4.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
              }
            ],
            "icon":"https://pic1.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
            "night_icon":"https://pic3.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
          },
          "old_badges":[
            {
              "type":"best_answerer",
              "description":"优秀答主",
              "topics":[
                {
                  "id":"19552832",
                  "type":"topic",
                  "url":"https://www.zhihu.com/topic/19552832",
                  "name":"Python",
                  "avatar_url":"https://pic4.zhimg.com/v2-1a9bf5312114564fb132692b355b5199_hd.jpg"
                }
              ]
            }
          ],
          "badge_v2_string":"{\"title\":\"Python话题下的优秀答主\",\"merged_badges\":[{\"type\":\"best\",\"detail_type\":\"best\",\"title\":\"优秀答主\",\"description\":\"Python话题下的优秀答主\",\"url\":\"https://www.zhihu.com/question/48509984\",\"sources\":[{\"id\":\"19552832\",\"token\":\"19552832\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19552832\",\"name\":\"Python\",\"avatar_path\":\"v2-1a9bf5312114564fb132692b355b5199\",\"avatar_url\":\"https://pic4.zhimg.com/v2-1a9bf5312114564fb132692b355b5199_hd.jpg\",\"description\":\"\",\"priority\":0}],\"icon\":\"\",\"night_icon\":\"\"}],\"detail_badges\":[{\"type\":\"best\",\"detail_type\":\"best_answerer\",\"title\":\"优秀答主\",\"description\":\"Python话题下的优秀答主\",\"url\":\"https://www.zhihu.com/question/48509984\",\"sources\":[{\"id\":\"19552832\",\"token\":\"19552832\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19552832\",\"name\":\"Python\",\"avatar_path\":\"v2-1a9bf5312114564fb132692b355b5199\",\"avatar_url\":\"https://pic4.zhimg.com/v2-1a9bf5312114564fb132692b355b5199_hd.jpg\",\"description\":\"\",\"priority\":0}],\"icon\":\"https://pic4.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic4.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"}],\"icon\":\"https://pic1.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic3.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"}"
        },
        "flag":{
          "flag_type":"author_follower",
          "flag_text":""
        },
        "is_zhi_plus":false,
        "extra":"",
        "health_tabs":null,
        "health_tag":"",
        "sub_content_type":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"Os8BCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYBCIINDkwMjc3MTIqCTEzMzc2ODg4MTIGNjE5NTM4OggyMTA5NzIzN0oEanNvblAAWAFgAWoEanNvbnAEgAGnvKKonqL1ApgBAKABDKgBALABAbgBAMIBCemrmOWFs+azqNABuZ/8wQXYARXgAQWAAgG4AgCKAwCSAxMxNDMzNTU3Mjk3ODY4NDQ3NzQ0mgMAogMJMTAxXzNfMi4wqgMA",
        "content_tags":null
      },
      "index":12
    },
    {
      "type":"relevant_query",
      "query_list":[
        {
          "query":"json文件",
          "attached_info_bytes":"OncSIDZkMDk5OTAzZGJmMzAyZjE2ZGUzMDM3YzdlYzdjZWFiSgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCoAENqAEAsAEFgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMA=="
        },
        {
          "query":"json是什么",
          "attached_info_bytes":"OncSIDZkMDk5OTAzZGJmMzAyZjE2ZGUzMDM3YzdlYzdjZWFiSgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCoAENqAEBsAEFgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMA=="
        },
        {
          "query":"json怎么打开",
          "attached_info_bytes":"OncSIDZkMDk5OTAzZGJmMzAyZjE2ZGUzMDM3YzdlYzdjZWFiSgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCoAENqAECsAEFgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMA=="
        },
        {
          "query":"json格式",
          "attached_info_bytes":"OncSIDZkMDk5OTAzZGJmMzAyZjE2ZGUzMDM3YzdlYzdjZWFiSgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCoAENqAEDsAEFgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMA=="
        },
        {
          "query":"什么是json",
          "attached_info_bytes":"OncSIDZkMDk5OTAzZGJmMzAyZjE2ZGUzMDM3YzdlYzdjZWFiSgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCoAENqAEEsAEFgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMA=="
        },
        {
          "query":"jsonqiu",
          "attached_info_bytes":"OncSIDZkMDk5OTAzZGJmMzAyZjE2ZGUzMDM3YzdlYzdjZWFiSgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCoAENqAEFsAEFgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMA=="
        }
      ],
      "attached_info_bytes":"OnQSIDZkMDk5OTAzZGJmMzAyZjE2ZGUzMDM3YzdlYzdjZWFiSgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCoAENsAEFgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMA=="
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"应评论区的要求，补充对于node.js的介绍。---------------------------------------------------------1. javascriptjavascript（简称js）是一种主要运行于浏览器中的弱类型的动态脚本语言",
        "title":"JavaScript、jQuery、AJAX、\u003cem\u003eJSON\u003c/em\u003e 这四个之间的关系？"
      },
      "object":{
        "id":"116439739",
        "type":"answer",
        "excerpt":"应评论区的要求，补充对于node.js的介绍。---------------------------------------------------------1. javascriptjavascript（简称js）是一种主要运行于浏览器中的弱类型的动态脚本语言",
        "url":"https://api.zhihu.com/answers/116439739",
        "voteup_count":1003,
        "comment_count":35,
        "created_time":1470987675,
        "updated_time":1472182119,
        "content":"\u003cp data-pid=\"X_MpfyyC\"\u003e应评论区的要求，补充对于Node.js的介绍。\u003c/p\u003e\u003cp data-pid=\"Pv1mmk2X\"\u003e\u003cb\u003e\u003cb\u003e---------------------------------------------------------\u003c/b\u003e\u003cbr/\u003e\u003cbr/\u003e1. JavaScript\u003c/b\u003e\u003c/p\u003e\u003cp data-pid=\"rp9w0_Ka\"\u003eJavaScript（简称js）是一种主要运行于浏览器中的弱类型的动态脚本语言，可以用来实现网页上的一些高级功能，如数据验证处理、页面动态效果、定时任务、与用户交互、发送/接收服务器端数据等等。\u003c/p\u003e\u003cp data-pid=\"wkWnTQRM\"\u003e动态语言指的是程序运行时可以改变结构，主要体现在：\u003c/p\u003e\u003cp data-pid=\"OofiwGGh\"\u003e① js中的变量在声明的时候不需要指定类型，其实际类型由程序运行中的赋值决定，在运行过程中变量的类型也可以改变。\u003cb\u003e注：这一点是动态语言的特征，并不是弱类型语言的特征，之前的回答有误。\u003c/b\u003e\u003c/p\u003e\u003cp data-pid=\"5B4hpqnR\"\u003e② 函数可变。js允许在运行过程中使用eval动态执行字符串里的命令，也可以通过new Function等方式由字符串动态构造函数，函数可以被创建、修改、删除，可以从已有函数构造出新函数，等等。\u003c/p\u003e\u003cp data-pid=\"JDBIdZ4y\"\u003e③ 对象的成员可变，可以动态添加、删除成员属性或成员方法。\u003c/p\u003e\u003cp data-pid=\"nxw6CtbN\"\u003e弱类型指的是js中的变量在参与运算的时候可以根据实际需要动态转换类型。与之相对应的是强类型语言——变量一般不允许自动转换类型（某些强类型语言的字符串连接操作除外），如果参与运算、调用时不符合要求的类型，则会在编译阶段报错。\u003c/p\u003e\u003cp data-pid=\"6964XD5r\"\u003ejs是1995年由Netscape公司的Brendan Eich为自家的浏览器Netscape Navigator开发的，当时意图是用于网页上的表单验证，即验证表单的各个输入项是否符合预定规则，在验证通过后才向服务器提交表单内容，减少页面与服务器端不必要的频繁交互。\u003c/p\u003e\u003cp data-pid=\"_u0WZ87W\"\u003ejs的最初版本只用了10天就开发完成，当然不是完全从无到有，而是借鉴了其他一些语言的特性来开发。如此仓促开发，js自然有一些先天不足，但同时也具备了基于弱类型动态语言的方便灵活、对象原型继承、函数是一种特殊的对象等优秀特性，于是越来越得到广泛应用，而语言自身也在标准化组织的推动下不断发展进步。\u003c/p\u003e\u003cp data-pid=\"kEX_ZuIc\"\u003e在浏览器发展的早期，Microsoft仿造JavaScript推出了相似的脚本语言JScript，在IE浏览器中使用，Microsoft同时推出的还有VBScript。后来为了解决不同浏览器中脚本语言不兼容的问题，在ECMA（欧洲计算机制造商协会）成立了标准化小组，由各厂商参与，共同制定JavaScript的语言规范，规范化的这门语言被命名为ECMAScript。\u003c/p\u003e\u003cp data-pid=\"3Py9Rq2Z\"\u003ejs也可以在浏览器之外的其他场合使用，如服务器端的Node.js、java的Rhino、无界面浏览器PhantomJS等。\u003c/p\u003e\u003cp data-pid=\"Ii8UhjSv\"\u003e\u003cb\u003e2. jQuery\u003c/b\u003e\u003c/p\u003e\u003cp data-pid=\"Gxc5omz6\"\u003ejQuery是js的一个工具库，由John Resig在2006年发布。\u003c/p\u003e\u003cp data-pid=\"7XN9ARMI\"\u003ej代表JavaScript，query是“查询”的意思。也就是说，这个库的意图是基于JavaScript的查询。\u003c/p\u003e\u003cp data-pid=\"c9Ho4gao\"\u003e查询的目标是什么？答案是DOM（文档对象模型）结构中的Node（节点）。一个网页就是一个html文档，而网页上的所有内容都是节点，包括文档节点、元素节点、文本节点、注释节点、属性节点等等。而jQuery的查询最主要针对的是元素节点，如段落（p）、锚点（a）、表格（table）等，只有少数方法可以处理文本节点与注释节点。同时jQuery还可以用attr方法方便地对元素节点的属性进行读取/设置。\u003c/p\u003e\u003cp data-pid=\"uhknqwmv\"\u003e在jQuery出现之前，在js程序中获取元素节点比较麻烦，例如获取id为elem1的节点：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementById\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;elem1\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"ZmVBN7W_\"\u003e或者是获取页面上的所有checkbox元素，首先需要获取input类型的元素：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e\u003cspan class=\"nb\"\u003edocument\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003egetElementsByTagName\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;input\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"mzk4U5g4\"\u003e然后对获得的元素列表进行for循环处理，逐个判断其类型是否为checkbox。\u003c/p\u003e\u003cp data-pid=\"R-bKbrFK\"\u003e如果有更多元化的查询要求，则对应的js代码也会相当复杂。虽然有一些库可以解决这方面的需求，但强大程度、易用性等方面都不太理想。\u003c/p\u003e\u003cp data-pid=\"hVitGzFj\"\u003eJohn Resig发现了一个盲点——css样式应用到页面上的元素时，是有一套规则的，即css选择器，浏览器可以通过css选择器找到匹配的元素并将指定的样式应用到这些元素上。也就是说，通过css选择器可以有效地进行元素查找定位，但它最初只被用于样式领域。于是，John Resig根据css选择器编写了jQuery选择器，并对选择器的规则进行了扩充，从而让元素查找变得非常方便。例如，上面2个例子用jQuery可以写为：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e\u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;#elem1\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"Rwt2apWt\"\u003e与\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e\u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s2\"\u003e\u0026#34;:checkbox\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"h-O81zkk\"\u003e同时，jQuery还有一个核心思想——链式操作，例如：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e\u003cspan class=\"nx\"\u003e$\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e\u0026#39;div.con\u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eheight\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e100\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003eshow\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"66M8rp3Z\"\u003e这样的连续调用可以让代码书写更加简洁，也就是jQuery自己的口号：write less, do more。\u003c/p\u003e\u003cp data-pid=\"potAk3Gf\"\u003e此外，jQuery还提供了浏览器兼容、样式读写、事件绑定与执行、动画等特性，后来又加入了ajax、promise等，再加上方便的插件编写机制，对整个js的生态圈产生了重大的影响，可以说是js历史上影响力最大的一个库。其中选择器引擎后来被单独剥离出来成为sizzle，供其他的js库调用。这部分的工作还影响了官方，在jQuery成功之后，浏览器才有了querySelector与querySelectorAll方法。时至今日，虽然有了querySelector与querySelectorAll，但jQuery的选择器仍然有少部分特性是前2者所无法替代的。\u003c/p\u003e\u003cp data-pid=\"Bbso0-MV\"\u003e\u003cb\u003e3. ajax\u003c/b\u003e\u003c/p\u003e\u003cp data-pid=\"wkYO_UEp\"\u003eajax全称Asynchronous JavaScript and XML（异步的JavaScript与XML），是网页无需刷新页面、使用js与服务器进行交互的一种技术。\u003c/p\u003e\u003cp data-pid=\"wa1Mcuej\"\u003e有时候会有这样一种需求：只希望更改页面上的一个区域。然而在从前的技术框架内只能刷新整个页面，带来的后果是：①需要重新传输整个页面，服务器端与客户端的流量消耗都会比较大；②如果是动态页，服务器端需要重新生成整个页面，即使是那些客户原本不想要刷新的区域，增大了服务器的负担。\u003c/p\u003e\u003cp data-pid=\"BPbCJYy6\"\u003eGoogle的Jesse James Garrett在2005年初发表了一篇文章，提供了解决这种需求的技术方案，也就是ajax。实际上这是一种实践先行的技术，该方案的技术依赖之一XMLHTTP在1998年就已经被Microsoft开发出来了，而Google在若干年后使用这项技术开发Google Maps等产品之后，才发表了相应的文章并对其进行了命名。\u003c/p\u003e\u003cp data-pid=\"4s7KS_t9\"\u003eajax的基本流程可以概括为：页面上js脚本实例化一个XMLHttpRequest对象，设置好服务器端的url、必要的查询参数、回调函数之后，向服务器发出请求，服务器在处理请求之后将处理结果返回给页面，触发事先绑定的回调函数。这样，页面脚本如果想要改变一个区域的内容，只需要通过ajax向服务器获取与该区域有关的少量数据，在回调函数中将该区域的内容替换掉即可，不需要刷新整个页面。\u003c/p\u003e\u003cp data-pid=\"Cm_9-C3j\"\u003eXMLHttpRequest在发送请求的时候，有两种方式：同步与异步。同步方式是请求发出后，一直到收到服务器返回的数据为止，浏览器进程被阻塞，页面上什么事也做不了。而异步方式则不会阻塞浏览器进程，在服务端返回数据并触发回调函数之前，用户依然可以在该页面上进行其他操作。ajax的核心是异步方式，而同步方式只有在极其特殊的情况下才会被用到。\u003c/p\u003e\u003cp data-pid=\"oxdoPD8A\"\u003eXMLHttpRequest在早期IE浏览器里是使用ActiveX来实现的，并不是浏览器自身的对象。后来其他各家浏览器也都实现了XMLHttpRequest对象，而高版本IE也把XMLHttpRequest改为了浏览器的内建对象。\u003c/p\u003e\u003cp data-pid=\"_ZP_s4zd\"\u003e\u003cb\u003e4. JSON\u003c/b\u003e\u003c/p\u003e\u003cp data-pid=\"40CE7FcI\"\u003eJSON全称JavaScript Object Notation（js对象标记法），由Douglas Crockford在2002年发现并制定了标准。从名称上就可以看出来，JSON是基于JavaScript的，是JavaScript的一个子集。JSON是用JavaScript语法来表示数据的一种轻量级语言。\u003c/p\u003e\u003cp data-pid=\"mCWWrN5e\"\u003e虽然Douglas在2002年就注册了\u003ca href=\"https://link.zhihu.com/?target=http%3A//json.org\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003e\u003cspan class=\"invisible\"\u003ehttp://\u003c/span\u003e\u003cspan class=\"visible\"\u003ejson.org\u003c/span\u003e\u003cspan class=\"invisible\"\u003e\u003c/span\u003e\u003c/a\u003e，并且为各种语言编写了解析与构造JSON数据的库，但在最开始的几年JSON一直没有得到足够的重视。情况一直延续到ajax的出现。\u003c/p\u003e\u003cp data-pid=\"ULqA6F0-\"\u003e从ajax的命名中我们就可以看到，数据交换是通过XML格式进行的。在ajax刚出现的时候，绝大多数应用都是采用XML格式，也有少数使用纯文本的。但是XML格式有一个缺点，就是文档构造复杂，需要传输比较多的字节数。在这种情况下，JSON的轻便性逐渐得到重视，后来替代XML成为ajax最主要的数据传输格式。可以举个简单的例子感受一下二者的区别：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-xml\"\u003e\u003cspan class=\"cp\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;utf-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;root\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;article\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eArticle Title1\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;content\u0026gt;\u003c/span\u003econtent1\u003cspan class=\"nt\"\u003e\u0026lt;/content\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/article\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;article\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;title\u0026gt;\u003c/span\u003eArticle Title2\u003cspan class=\"nt\"\u003e\u0026lt;/title\u0026gt;\u003c/span\u003e\n    \u003cspan class=\"nt\"\u003e\u0026lt;content\u0026gt;\u003c/span\u003econtent2\u003cspan class=\"nt\"\u003e\u0026lt;/content\u0026gt;\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026lt;/article\u0026gt;\u003c/span\u003e\n\u003cspan class=\"nt\"\u003e\u0026lt;/root\u0026gt;\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbr/\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-json\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n  \u003cspan class=\"nt\"\u003e\u0026#34;article\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Article Title1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;content\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;content1\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;title\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Article Title2\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n      \u003cspan class=\"nt\"\u003e\u0026#34;content\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;content2\u0026#34;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n  \u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbr/\u003e\u003cp data-pid=\"7mu3eTB6\"\u003eXML规范实际上是比较复杂的，单纯作为数据传输来说它太重了。在ajax领域中JSON取代XML的过程，是一个很好的“用脚投票”的范例。\u003c/p\u003e\u003cp data-pid=\"a8RjThnu\"\u003e而JSON的影响力在此后还继续扩大，有些软件将其作为配置文件的格式，有些编程语言也吸纳了JSON的优点。例如c#，在高版本里可以这样写：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-csharp\"\u003e\u003cspan class=\"n\"\u003eDictionary\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edict\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eDictionary\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cbr/\u003e\u003cp data-pid=\"J-MRWWhf\"\u003e但是如果c# 2.0这样写，可是会报错的。在2.0里只能写成下面这种形式：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-csharp\"\u003e\u003cspan class=\"n\"\u003eDictionary\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edict\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eDictionary\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;();\u003c/span\u003e\n\u003cspan class=\"n\"\u003edict\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003edict\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eAdd\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"UdBk-IgI\"\u003e等价于\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-csharp\"\u003e\u003cspan class=\"n\"\u003eDictionary\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003edict\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eDictionary\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003estring\u003c/span\u003e\u003cspan class=\"p\"\u003e\u0026gt;();\u003c/span\u003e\n\u003cspan class=\"n\"\u003edict\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;a\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003edict\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"m\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;b\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"LNQZw-ek\"\u003e比较一下两种写法的区别，不仅有便捷性的差距，而且前一种写法可以在声明变量的同时为变量赋值，后一种写法则不行，这会影响到类属性的初始化操作：在c# 2.0中，只能把针对Dictionary之类复杂对象的初始化代码写在函数里，而不能直接写在类属性的声明处。\u003c/p\u003e\u003cp data-pid=\"v59Il9Ka\"\u003e感觉上是c#受了JSON（或者说js）的影响。但此处是我个人的感觉，如有错误请指出。\u003c/p\u003e\u003cp data-pid=\"dT835laB\"\u003e回到js自身，对于对象构造有两种方法：基于对象的完整写法，字面量表示法。前者如：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"nb\"\u003eObject\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003etitle\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;title1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"nx\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"nx\"\u003econtent\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;content1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"aWba7fdB\"\u003e而与之对应的字面量表示法则写为：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-js\"\u003e\u003cspan class=\"kd\"\u003evar\u003c/span\u003e \u003cspan class=\"nx\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003etitle\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;title1\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003econtent\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;content1\u0026#34;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"8-D9CNMd\"\u003e可以明显看出字面量表示法要简洁得多。而JSON基本就是字面量表示法的一个子集，除了强制要求键与字符串类型的值必须用双引号包起之外，它剔除了undefined、function等类型，也不包括浏览器内置对象类型（如Date、RegExp等），是基于文本的、比较纯粹的数据表示方法。所以说，Douglas是“发现”了JSON，而不是“发明”。标准的JSON不包含注释，但后来因为实际需求而出现了能够处理注释的JSON库。\u003c/p\u003e\u003cp data-pid=\"KGOS5tKd\"\u003e\u003cb\u003e5. Node.js\u003c/b\u003e\u003c/p\u003e\u003cp data-pid=\"6fYLBBo1\"\u003eNode.js是Ryan Dahl在2009年发布的、主要用于服务器端的Javascript运行环境，也可以用于个人电脑。\u003c/p\u003e\u003cp data-pid=\"KS40lNvd\"\u003eRyan Dahl此前一直在寻找一种事件驱动型的、异步的服务器端框架，实际上，js并不是他的首选。他是在尝试了几种语言之后，才发现js的函数回调与单线程特性正好契合他的要求，于是Node.js应运而生。\u003c/p\u003e\u003cp data-pid=\"KzawXXhT\"\u003ejs的异步回调在ajax的部分已经提过：在调用异步方法的时候，可以将后续的处理函数作为参数传入，在调用相应的异步接口之后，程序会将线程的控制权让出，允许其他代码执行；在接口返回处理结果后，再执行后续处理函数（即回调函数）。实际上，因为js是单线程语言，回调函数并不是立刻被执行的，而是会被送入任务队列，在线程空闲、并且队列前方没有其他任务的情况下，才会被执行。\u003c/p\u003e\u003cp data-pid=\"i0AaMply\"\u003e用户在向服务器提交请求的时候，如果处理比较费时，传统的服务器端框架会导致处理线程被阻塞。而js的特性使得异步任务在执行的时候让出线程的控制权，在处理完成后再进行正确的回调，从而能够获得比较好的高并发处理能力。\u003c/p\u003e\u003cp data-pid=\"jhieHohb\"\u003ejs本身是一门严格的单线程语言，而Node.js为了充分发挥服务器的处理能力，在运行环境级别上增加了对于多线程的支持（child process）。但Node.js的多线程与常规的多线程有很大区别——常规语言的多线程允许多个线程共享数据，或者调用其他线程暴露出来的公开方法，而Node.js的多线程只能用消息机制进行通讯。这样，Node.js就规避了常规多线程的数据同步、线程锁（线程同步/互斥）等复杂问题，规避了一些潜在风险。\u003c/p\u003e\u003cp data-pid=\"OlQeqBBa\"\u003eNode.js使用的V8引擎实际上就是Google的Chrome浏览器使用的Javascript引擎（因为V8引擎是开源的），并进行了模块扩展。例如遵循CommonJS标准的模块定义，适合服务器需求的多线程、集群、HTTP/HTTPS，文件系统，等等。Node.js中的很多方法都同时提供了异步版本与同步版本，从函数的命名上可以简单区分。\u003c/p\u003e\u003cp data-pid=\"bmlxBJ_K\"\u003e得益于其模块特性，Node.js的模块扩展变得相当方便，用于Node.js包管理的npm得到了广泛的使用，但也曾经引起“是否过度使用依赖包”的争论。\u003c/p\u003e\u003cp data-pid=\"pYwAgngM\"\u003eNode.js不仅可用于服务器端，因为其安装完成之后可以用命令行方式方便地调用，因此在个人电脑中也逐渐得到广泛应用。例如为代码编辑器提供插件、用于桌面的Node.js App等。另外还有一个重要的应用领域就是前端自动化，包括代码的预编译/转换（如使用Babel将ECMAScript 6的代码转换为低版本的es代码，将sass/less的样式表文件编译为传统的css文件）、语法检查、代码文件或图像文件的合并、代码的混淆/压缩、自动分发、自动测试等，还可以监视开发文件夹，在内容改变时自动执行上述操作，并自动刷新浏览器页面。这样使得前端领域的开发方式得到了大大进化。\u003c/p\u003e\u003cp data-pid=\"VsCCDr9_\"\u003ejs虽然因为有着一些先天不足而被人诟病，但这些年来却越发展越壮大。这不仅仅是因为依托于浏览器这个宿主环境，更是因为其自身具备的一些优秀特性，Node.js的出现与发展就是一个很好的例证。\u003c/p\u003e\u003cp data-pid=\"9HHYLqFM\"\u003e\u003cb\u003e总结\u003c/b\u003e\u003c/p\u003e\u003cp data-pid=\"LdCRmYrm\"\u003eajax与Node.js都使用了js的异步回调特性。\u003c/p\u003e\u003cp data-pid=\"a0z8WhsW\"\u003ejQuery的出现解决了那个各方面标准尚未统一的混乱时代的许多问题，让js的应用更加广泛，并为未来某些标准的制定指明了方向。\u003c/p\u003e\u003cp data-pid=\"J3MrttTM\"\u003eJSON从js中脱胎而出，作为一种简洁、扩展性好的轻量级数据表示方法，在很多领域得到了广泛使用。\u003c/p\u003e\u003cp data-pid=\"Q4OQft9d\"\u003eNode.js在服务器端与开发流程中都越来越得到重视。\u003c/p\u003e\u003cp data-pid=\"95ckseH5\"\u003e由于Node.js不包含BOM与DOM，因此jQuery不能直接在Node.js上使用，但可以借助jsdom、cheerio之类的库，在构造出虚拟的dom结构后再使用。查看github上的jQuery开发包，可以看到它使用了Node.js上的grunt来进行自动化构建、测试的工作。\u003c/p\u003e\u003cp data-pid=\"_5YmnbXb\"\u003e以上几项技术的共同进步，配合浏览器的进步，此外还有硬件条件的发展，让复杂的页面应用越来越多，许多以前在服务器端进行的工作可以转到客户的浏览器中进行，顺应了分布式处理的潮流。\u003c/p\u003e\u003ca data-hash=\"69ed13f3ddc662d6ecd8261512117e85\" href=\"https://www.zhihu.com/people/69ed13f3ddc662d6ecd8261512117e85\" class=\"member_mention\" data-editable=\"true\" data-title=\"@于江水\" data-hovercard=\"p$b$69ed13f3ddc662d6ecd8261512117e85\"\u003e@于江水\u003c/a\u003e\u003cp data-pid=\"x2ljFCo9\"\u003e\u003cb\u003e的答案存在一些错误或者不严谨之处： \u003c/b\u003e\u003c/p\u003e\u003cp data-pid=\"GWk6h1Fe\"\u003e1. js设计之初并不是用来弹窗或者改变页面上内容，这些功能是随着浏览器的发展才出现的。实际上js语言自身并不能实现这样的需求。\u003c/p\u003e\u003cp data-pid=\"WzDQmkgZ\"\u003e完整的JavaScript包括ECMAScript、BOM（浏览器对象模型，如window、location等对象）、DOM。其中BOM和DOM虽然是js的组成部分，但js只规定了这两者的接口规范，即浏览器返回这两类对象时，可以用js的方式来处理（点号或者方括号来操作对象成员，可以读取或修改属性等）。也就是说，js脚本通过浏览器提供的接口去操作BOM和DOM，js在其中主要进行流程控制。没有这些接口的支持，js自身是无法完成一些功能的。而早期各家浏览器对于接口实现的不同，也带来了比较严重的兼容性问题。\u003c/p\u003e\u003cp data-pid=\"7N5_Q_g6\"\u003e从js的标准化工作也能看出之间的不同。ECMAScript是由ECMA来进行标准化工作，而BOM和DOM则是由W3C（World Wide Web Consortium）来进行标准化的。\u003c/p\u003e\u003cp data-pid=\"ZzVW1Cod\"\u003e2. jQuery设计的第一要素是对于节点的查询。解决兼容性问题也是jQuery设计的重点，但不是第一位的。当时在尝试解决兼容性问题的js库有好几个，jQuery在这方面并不唯一。而jQuery选择器才是jQuery划时代的特性，从早已存在的事物（css选择器）中发现了价值，并将其修改扩充、发扬光大。\u003c/p\u003e\u003cp data-pid=\"7re-O8xh\"\u003e不可否认，jQuery的流行很大程度上要归功于解决兼容性问题，但作为名称中包含的“query”连提都不提，这答案有点偏了。\u003c/p\u003e\u003cp data-pid=\"mfzKPDWv\"\u003e3. ajax创建之初是用于处理Gmail、Google Maps这样的复杂页面应用，表单提交方式的改变只是ajax技术发展的一个副产品而已。\u003c/p\u003e\u003cp data-pid=\"c4_3Uuxu\"\u003e并且表单提交的问题并不仅仅在于填错项目，实际面临的问题要复杂得多，包括用户的网络掉线、服务器端因为请求过多而暂时无法响应等不可抗因素。在传统模式下，提交表单是前往一个新的动态页，如果出现了错误，运气好的时候点浏览器的“后退”按钮还可以返回表单填写界面，刚才写的东西都还在；运气不好的时候，只会看见一个空白的表单。当时在一些论坛里，总能看到“辛辛苦苦码的字一提交就全没了”的哭诉。\u003c/p\u003e\u003cp data-pid=\"FXdDrWpG\"\u003e4. 对于JSON的用途描述有错。原答案中提到提交内容简单的时候，用字符串发送，后来改为XML与JSON。实际上，JSON用于客户端（包括浏览器）与服务端通讯的时候，主要指的是服务器端返回处理结果时送回给客户端的数据格式是JSON。而客户端提交给服务器端的数据大多数并不是XML或JSON格式的。\u003c/p\u003e\u003cp data-pid=\"Kghk9HtQ\"\u003e客户端向服务器端提交数据的时候，使用GET或POST方法，其数据一般是简单的“键/值对”表示，例如常见的GET方法在url中构造的参数：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-text\"\u003e?page=1\u0026amp;pagesize=20\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"7NFpiCbX\"\u003ePOST方法在提交一般类型的表单时，与GET方法在数据组织形式上基本相近（除非是用multipart类型的表单发送文件数据），但http数据包格式、浏览器历史记录、以及服务器端接收处理有所区别，这属于http协议的内容，此处不展开。\u003c/p\u003e\u003cp data-pid=\"c06jIGol\"\u003e因此，客户端向服务器端提交数据的时候，主要是采用字符串拼接的方式按上述例子构造，一般不会使用XML或者JSON格式，特别是在ajax出现的早期。（近年来随着页面应用越来越复杂，用JSON格式向服务器端传递数据的情况也逐渐增加）\u003c/p\u003e\u003cp data-pid=\"UgFW-tzU\"\u003e而服务器端返回给客户端的数据格式，一开始的主流就是XML，不存在以字符串为主然后过渡到XML的过程。\u003c/p\u003e\u003cp data-pid=\"rg69oq2H\"\u003e另外，XMLHTTP还可以用来进行服务器间通讯，早期发送与接收数据的主流格式都是XML，但是这与ajax不是一回事。\u003c/p\u003e",
        "thumbnail_info":{
          "count":0,
          "thumbnails":[

          ],
          "type":"thumbnail_info",
          "total_count":0
        },
        "relationship":{
          "voting":0,
          "is_author":false,
          "is_thanked":false,
          "is_nothelp":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "question":{
          "id":"31305968",
          "type":"question",
          "name":"JavaScript、jQuery、AJAX、\u003cem\u003eJSON\u003c/em\u003e 这四个之间的关系？",
          "url":"https://api.zhihu.com/questions/31305968"
        },
        "author":{
          "id":"f7ba2c1c1b1e05096a7b628a625958a2",
          "url_token":"alast",
          "name":"sagittarius-rev",
          "headline":"",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/f7ba2c1c1b1e05096a7b628a625958a2",
          "type":"people",
          "avatar_url":"https://pic2.zhimg.com/50/5af509e0fa16077387991090234f2738_l.jpg?source=4e949a73",
          "badge":[

          ],
          "authority_info":null,
          "voteup_count":1678,
          "follower_count":423,
          "badge_v2":{
            "title":"",
            "merged_badges":[

            ],
            "detail_badges":[

            ],
            "icon":"",
            "night_icon":""
          },
          "badge_v2_string":"{\"title\":\"\",\"merged_badges\":[],\"detail_badges\":null,\"icon\":\"\",\"night_icon\":\"\"}"
        },
        "flag":null,
        "is_zhi_plus":false,
        "extra":"",
        "health_tabs":null,
        "health_tag":"",
        "sub_content_type":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OsUBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYBCIINDIwNTk0NzYqCTExNjQzOTczOTIHNDcwNTEwNzoIMzEzMDU5NjhKBGpzb25QAFgBYAFqBGpzb25wBIABp7yiqJ6i9QKYAQCgAQ6oAQCwAQG4AQDQAZv7tb0F2AHrB+ABI4ACAbgCAIoDAJIDEzE0MzM1NTcyOTc4Njg0NDc3NDSaAwCiAwkxMDFfM18yLjCqAwA=",
        "content_tags":null
      },
      "index":14
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"首先，你没搞明白\u003cem\u003eJSON\u003c/em\u003e的概念，\u003cem\u003eJSON\u003c/em\u003e(JavaScript Object Notation) 是一种轻量级的数据交换格式。而不是问题中跟MySQL或者SQLite一个层级的",
        "title":"如何用 \u003cem\u003eJSON\u003c/em\u003e 来代替小项目的数据库？"
      },
      "object":{
        "id":"2141305158",
        "type":"answer",
        "excerpt":"首先，你没搞明白\u003cem\u003eJSON\u003c/em\u003e的概念，\u003cem\u003eJSON\u003c/em\u003e(JavaScript Object Notation) 是一种轻量级的数据交换格式。而不是问题中跟MySQL或者SQLite一个层级的",
        "url":"https://api.zhihu.com/answers/2141305158",
        "voteup_count":0,
        "comment_count":3,
        "created_time":1632652361,
        "updated_time":1632652361,
        "content":"\u003cp data-pid=\"XnZV-cK2\"\u003e首先，你没搞明白JSON的概念，\u003cb\u003eJSON\u003c/b\u003e(JavaScript Object Notation) 是一种轻量级的数据交换格式。而不是问题中跟MySQL或者SQLite一个层级的。JSON是一种格式，协议。数据库则是一种软件。\u003c/p\u003e\u003cp data-pid=\"hpo_ui03\"\u003e说回题目，你期望制作一个用户的注册登录的demo，那如何解决数据的存储呢？平时大家使用的是MySQL或者sqlite，如果排除掉这两项的话，我觉得，最简单的，就是文件存储了。\u003c/p\u003e\u003cp data-pid=\"vstwTYoY\"\u003e比如，把用户名和密码，整理成JSON格式，然后以用户名为文件名称，保存到文件系统中。读取或者修改，都根据用户名这个文件名称来进行。\u003c/p\u003e\u003cp\u003e\u003c/p\u003e",
        "thumbnail_info":{
          "count":0,
          "thumbnails":[

          ],
          "type":"thumbnail_info",
          "total_count":0
        },
        "relationship":{
          "voting":0,
          "is_author":false,
          "is_thanked":false,
          "is_nothelp":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "question":{
          "id":"489001368",
          "type":"question",
          "name":"如何用 \u003cem\u003eJSON\u003c/em\u003e 来代替小项目的数据库？",
          "url":"https://api.zhihu.com/questions/489001368"
        },
        "author":{
          "id":"079f1074b21d83116a6186f9736720e6",
          "url_token":"li-sheng-wei",
          "name":"李省伟",
          "headline":"PHP工程师",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/079f1074b21d83116a6186f9736720e6",
          "type":"people",
          "avatar_url":"https://pica.zhimg.com/50/859135895_l.jpg?source=4e949a73",
          "badge":[

          ],
          "authority_info":null,
          "voteup_count":154,
          "follower_count":144,
          "badge_v2":{
            "title":"",
            "merged_badges":[

            ],
            "detail_badges":[

            ],
            "icon":"",
            "night_icon":""
          },
          "badge_v2_string":"{\"title\":\"\",\"merged_badges\":[],\"detail_badges\":null,\"icon\":\"\",\"night_icon\":\"\"}"
        },
        "flag":null,
        "is_zhi_plus":false,
        "extra":"",
        "health_tabs":null,
        "health_tag":"",
        "sub_content_type":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OsgBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYBCIJNDE5NDA3ODQ2KgoyMTQxMzA1MTU4Mgg3MDk0ODU3NzoJNDg5MDAxMzY4SgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCmAEAoAEPqAEAsAEBuAEA0AHJmMGKBtgBAOABA4ACAbgCAIoDAJIDEzE0MzM1NTcyOTc4Njg0NDc3NDSaAwCiAwkxMDFfM18yLjCqAwA=",
        "content_tags":null
      },
      "index":15
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"这一“问”一“答”我们换种形式来写 就这样 这就是\u003cem\u003ejson\u003c/em\u003e格式的数据（所有符号必须在英文状态下输入） \u003cem\u003ejson\u003c/em\u003e有什么用? 比如说 你的团队服务号需要申请微信的模板消息",
        "title":"\u003cem\u003ejson\u003c/em\u003e是什么？"
      },
      "object":{
        "id":"33124986",
        "title":"\u003cem\u003ejson\u003c/em\u003e是什么？",
        "type":"article",
        "url":"https://api.zhihu.com/articles/33124986",
        "excerpt":"这一“问”一“答”我们换种形式来写 就这样 这就是\u003cem\u003ejson\u003c/em\u003e格式的数据（所有符号必须在英文状态下输入） \u003cem\u003ejson\u003c/em\u003e有什么用? 比如说 你的团队服务号需要申请微信的模板消息",
        "voteup_count":54,
        "comment_count":0,
        "created_time":1516427723,
        "updated_time":1516427722,
        "content":"\u003cp\u003e\u003c/p\u003e\u003ch2\u003e什么是json\u003c/h2\u003e\u003cp data-pid=\"tJ4mNT_E\"\u003e百度了一下，全称是JavaScript Object Notation\u003c/p\u003e\u003cp data-pid=\"hN93VfQE\"\u003e你不知道什么意思？我也不知道下面用一个例子说明\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic4.zhimg.com/v2-f6f8037b7f24582108524c9d3778c897_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-f6f8037b7f24582108524c9d3778c897_r.jpg\"/\u003e\u003c/figure\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cblockquote data-pid=\"JvVQaEad\"\u003e问：今年多大答：18cm\u003c/blockquote\u003e\u003cp data-pid=\"Tu8oq4W5\"\u003e这一“问”一“答”我们换种形式来写\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic3.zhimg.com/v2-677bed0f1fe22dfd1307a905b56a80fa_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"103\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-677bed0f1fe22dfd1307a905b56a80fa_r.jpg\"/\u003e\u003c/figure\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp data-pid=\"Q4d45SuE\"\u003e就这样\u003c/p\u003e\u003cp data-pid=\"WPy-GEoB\"\u003e这就是json格式的数据（所有符号必须在英文状态下输入）\u003c/p\u003e\u003ch2\u003ejson有什么用?\u003c/h2\u003e\u003cp data-pid=\"xRbLIRef\"\u003e比如说\u003c/p\u003e\u003cp data-pid=\"0wbEggGP\"\u003e你的团队服务号需要申请微信的模板消息\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic3.zhimg.com/v2-13d8ba056415e1716172e119647596fe_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"703\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-13d8ba056415e1716172e119647596fe_r.jpg\"/\u003e\u003c/figure\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp data-pid=\"_cC9tOWy\"\u003e需要配这个模板消息给开发哥哥或者提交开放平台就要按格式弄成：\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic3.zhimg.com/v2-f084cb014aec03413683244ff3e794de_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"656\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-f084cb014aec03413683244ff3e794de_r.jpg\"/\u003e\u003c/figure\u003e\u003cp data-pid=\"Kko628EL\"\u003e比如说\u003c/p\u003e\u003cp data-pid=\"l2GabFpW\"\u003e理解一下第三方接口可以给你的内容更好的做产品决策\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic1.zhimg.com/v2-7936a4a85f0d9dcc8a12a8dca09dd5d4_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"475\" data-rawheight=\"556\" class=\"origin_image zh-lightbox-thumb\" width=\"475\" data-original=\"https://pic1.zhimg.com/v2-7936a4a85f0d9dcc8a12a8dca09dd5d4_r.jpg\"/\u003e\u003c/figure\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp data-pid=\"sjQz2eyS\"\u003e或者约约写代码的漂亮妹纸\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic2.zhimg.com/v2-22fada1a4106bf5fb22921e999155b1d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic2.zhimg.com/v2-22fada1a4106bf5fb22921e999155b1d_r.jpg\"/\u003e\u003c/figure\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp data-pid=\"76GLWADH\"\u003e还有....其实还有很多作用的你还能想到什么？快在微信后台告诉我\u003c/p\u003e\u003ch2\u003e进阶玩法\u003c/h2\u003e\u003cp data-pid=\"Zd8-o8fx\"\u003e嵌套\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic4.zhimg.com/v2-031bf33af42d073b8fbb52fd75b83477_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic4.zhimg.com/v2-031bf33af42d073b8fbb52fd75b83477_r.jpg\"/\u003e\u003c/figure\u003e\u003cp data-pid=\"htVxjuRx\"\u003e问题来了\u003cb\u003e觉不觉得花括号是个特别优美的符号？\u003c/b\u003e\u003c/p\u003e\u003cp data-pid=\"4YAHLpQ9\"\u003e某天开发哥哥扔你一个json文件比如下图酱紫的\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic3.zhimg.com/v2-15a90def40e6e8a02dbb7d98db01930a_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"16\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-15a90def40e6e8a02dbb7d98db01930a_r.jpg\"/\u003e\u003c/figure\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp data-pid=\"GzxKnwXH\"\u003e告诉你接口能提供这些数据你自己去跟第三方企业谈合作吧然后你就瞬间懵了\u003c/p\u003e\u003cp data-pid=\"xFfUSIsI\"\u003e怎么破？使用格式化工具\u003c/p\u003e\u003cp data-pid=\"NjEGtUT9\"\u003e比如\u003ca href=\"https://link.zhihu.com/?target=http%3A//tool.oschina.net/codeformat/json\" class=\" external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003e\u003cspan class=\"invisible\"\u003ehttp://\u003c/span\u003e\u003cspan class=\"visible\"\u003etool.oschina.net/codefo\u003c/span\u003e\u003cspan class=\"invisible\"\u003ermat/json\u003c/span\u003e\u003cspan class=\"ellipsis\"\u003e\u003c/span\u003e\u003c/a\u003e先在“\u003cb\u003e带格式化\u003c/b\u003e”区域填入开发哥哥给你的一行乱码\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic2.zhimg.com/v2-dd1b150b101c261dd8ad95c7d80f677d_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"637\" data-rawheight=\"64\" class=\"origin_image zh-lightbox-thumb\" width=\"637\" data-original=\"https://pic2.zhimg.com/v2-dd1b150b101c261dd8ad95c7d80f677d_r.jpg\"/\u003e\u003c/figure\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp data-pid=\"bmeBx7CQ\"\u003e然后点击“\u003cb\u003e格式化\u003c/b\u003e”就变成下图酱紫了\u003c/p\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic3.zhimg.com/v2-7280db07ec667a9018b6cbe4f560cbda_b.jpg\" data-caption=\"\" data-size=\"normal\" data-rawwidth=\"640\" data-rawheight=\"360\" class=\"origin_image zh-lightbox-thumb\" width=\"640\" data-original=\"https://pic3.zhimg.com/v2-7280db07ec667a9018b6cbe4f560cbda_r.jpg\"/\u003e\u003c/figure\u003e\u003cp class=\"ztext-empty-paragraph\"\u003e\u003cbr/\u003e\u003c/p\u003e\u003cp data-pid=\"UEtQ8pOZ\"\u003e啊...舒服....\u003c/p\u003e\u003cp data-pid=\"bIFzZ1S6\"\u003e讲完了意犹未尽？下期有灵感的时候再讲\u003c/p\u003e\u003cp data-pid=\"Z5nofRK1\"\u003e你们想了解什么也可以在微信公众号jinkey-love后台回复我, 或者直接在下方评论\u003c/p\u003e",
        "thumbnail_info":{
          "count":1,
          "thumbnails":[
            {
              "data_url":"",
              "url":"https://pic1.zhimg.com/80/v2-c43d2500f316cd4c9c5c6cd1d78b4e29_qhd.jpg?source=4e949a73",
              "type":"image",
              "width":0,
              "height":0
            }
          ],
          "type":"",
          "total_count":0
        },
        "author":{
          "id":"32daeef65948d94023c55d8a4d41185b",
          "url_token":"jinkey-huang",
          "name":"Jinkey",
          "headline":"",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/32daeef65948d94023c55d8a4d41185b",
          "type":"people",
          "avatar_url":"https://pica.zhimg.com/50/9966b61f09474e2d895714fed771078d_l.jpg?source=4e949a73",
          "badge":[

          ],
          "authority_info":null,
          "voteup_count":201,
          "follower_count":178,
          "badge_v2":{
            "title":"",
            "merged_badges":[

            ],
            "detail_badges":[

            ],
            "icon":"",
            "night_icon":""
          },
          "badge_v2_string":"{\"title\":\"\",\"merged_badges\":[],\"detail_badges\":null,\"icon\":\"\",\"night_icon\":\"\"}"
        },
        "voting":0,
        "relationship":{
          "is_voted":false,
          "is_author":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "flag":null,
        "is_zhi_plus":false,
        "extra":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"Oq8BCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYByIHNTQzOTM3NioIMzMxMjQ5ODZKBGpzb25QAFgBYAFqBGpzb25wBIABp7yiqJ6i9QKYAQCgARCoAQCwAQG4AQDQAcuzi9MF2AE24AEAgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMKoDAA==",
        "content_tags":null
      },
      "index":16
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"话不多说，先上code！ // 最简单的方式创建一个\u003cem\u003ejson\u003c/em\u003e对象 \u003cem\u003ejson\u003c/em\u003e obj = { { \u0026#34;null\u0026#34;, nullptr }, { \u0026#34;number\u0026#34;, 1 }, { \u0026#34;float\u0026#34;, 1.3 }, { \u0026#34;boolean\u0026#34;, false }, { \u0026#34;string\u0026#34;",
        "title":"用户体验第一的现代C++ \u003cem\u003eJSON\u003c/em\u003e库"
      },
      "object":{
        "id":"248209994",
        "title":"用户体验第一的现代C++ \u003cem\u003eJSON\u003c/em\u003e库",
        "type":"article",
        "url":"https://api.zhihu.com/articles/248209994",
        "excerpt":"话不多说，先上code！ // 最简单的方式创建一个\u003cem\u003ejson\u003c/em\u003e对象 \u003cem\u003ejson\u003c/em\u003e obj = { { \u0026#34;null\u0026#34;, nullptr }, { \u0026#34;number\u0026#34;, 1 }, { \u0026#34;float\u0026#34;, 1.3 }, { \u0026#34;boolean\u0026#34;, false }, { \u0026#34;string\u0026#34;",
        "voteup_count":441,
        "comment_count":138,
        "created_time":1600249559,
        "updated_time":1615571602,
        "content":"\u003cp data-pid=\"Wskmzb6U\"\u003e话不多说，先上code！\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"c1\"\u003e// 最简单的方式创建一个json对象\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;null\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003enullptr\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;number\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;float\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.3\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;boolean\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;中文测试\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;array\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.4\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;object\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;key\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"taybctaE\"\u003e有没有觉得单看这段代码都有种js内味了（误）。但是没错，上面这段代码是\u003ccode\u003eC++\u003c/code\u003e ！\u003c/p\u003e\u003cp data-pid=\"nuvB4ttg\"\u003e如果这引起了你的些许兴趣，那就说明这个轮子成功了。\u003c/p\u003e\u003ch3\u003e故事在前\u003c/h3\u003e\u003cp data-pid=\"kb5WpmWn\"\u003e造轮子的初衷是在两年前，我记得那天空中都是圆圆的轮状云，突然想给自己的游戏做一个json格式的配置文件。当我百度一下C++ json库时，被一张图震惊了\u003c/p\u003e\u003cfigure data-size=\"normal\"\u003e\u003cimg src=\"https://pic1.zhimg.com/v2-7c859fc0b8b23e052234dbd19f9fcc2c_b.jpg\" data-size=\"normal\" data-rawwidth=\"1264\" data-rawheight=\"1120\" class=\"origin_image zh-lightbox-thumb\" width=\"1264\" data-original=\"https://pic1.zhimg.com/v2-7c859fc0b8b23e052234dbd19f9fcc2c_r.jpg\"/\u003e\u003cfigcaption\u003e28个C/C++开源JSON库性能对比\u003c/figcaption\u003e\u003c/figure\u003e\u003cp data-pid=\"ieOYt3Na\"\u003e当然震惊我的不是这些库的性能，而是竟然足足有28个比较火的库在互相对比。。还有哪个语言可以做到让这么多人乐此不疲的为了一个小功能写那些重复的逻辑和代码呢？\u003c/p\u003e\u003cp data-pid=\"K1nObf4F\"\u003e然后我选了几个比较热门的库看看usage，看的越多，震惊越多。\u003c/p\u003e\u003cp data-pid=\"d0coLAfa\"\u003e每一个库的接口设计都无法获得我在\u003cb\u003e审美上的认同\u003c/b\u003e，甚至有些demo代码又长又臭，这时候真的是想感叹一句：我爱Golang！（误）\u003c/p\u003e\u003cp data-pid=\"WeblgtGq\"\u003e于是那天的云彩显得越发的圆润。直到那天我才知道，原来C++的设计美学从底子里就是圆形的。\u003c/p\u003e\u003cp data-pid=\"Tf6kKZUk\"\u003e所以各位手下留情，这个库的存在并不是提升了多少性能，或者支持了多少json标准，而仅仅是为了美才诞生的。\u003c/p\u003e\u003cp data-pid=\"AbT1ybtN\"\u003e这个库的slogan也很简单：\u003c/p\u003e\u003cp data-pid=\"ZCuDsZv5\"\u003e\u003cb\u003e愿天堂没有C++\u003c/b\u003e\u003c/p\u003e\u003chr/\u003e\u003cp data-pid=\"EBn34cH4\"\u003e好了，认真介绍一下这个库：\u003c/p\u003e\u003ch3\u003eJSONXX\u003c/h3\u003e\u003cp data-pid=\"n9DgfsQ7\"\u003e一个为 C++11 量身打造的轻量级 JSON 通用工具，轻松完成 JSON 解析和序列化功能，并和 C++ 输入输出流交互。\u003c/p\u003e\u003ca href=\"https://link.zhihu.com/?target=https%3A//github.com/Nomango/jsonxx\" data-draft-node=\"block\" data-draft-type=\"link-card\" data-image=\"https://pic3.zhimg.com/v2-3fbb9a1e6ee91f5b74688c1db416c026_ipico.jpg\" data-image-width=\"400\" data-image-height=\"400\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003eNomango/jsonxx\u003c/a\u003e\u003ch3\u003e使用介绍\u003c/h3\u003e\u003cul\u003e\u003cli data-pid=\"23Qts4bv\"\u003e引入 jsonxx 头文件\u003c/li\u003e\u003c/ul\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"cp\"\u003e#include\u003c/span\u003e \u003cspan class=\"cpf\"\u003e\u0026#34;jsonxx/json.hpp\u0026#34;\u003c/span\u003e\u003cspan class=\"cp\"\u003e\n\u003c/span\u003e\u003cspan class=\"cp\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eusing\u003c/span\u003e \u003cspan class=\"k\"\u003enamespace\u003c/span\u003e \u003cspan class=\"n\"\u003ejsonxx\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\u003cli data-pid=\"IQragylr\"\u003e使用 C++ 的方式的创建 JSON 对象\u003c/li\u003e\u003c/ul\u003e\u003cp data-pid=\"j2ivDkjt\"\u003e使用 \u003ccode\u003eoperator[]\u003c/code\u003e 为 JSON 对象赋值\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;number\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;float\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.5\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;this is a string\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;boolean\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Nomango\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"2zRkr22K\"\u003e使用 \u003ccode\u003estd::initializer_list\u003c/code\u003e 为 JSON 对象赋值\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"c1\"\u003e// 使用初始化列表构造数组\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e \u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 使用初始化列表构造对象\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"s\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e10\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n            \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Nomango\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n        \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 第二个对象\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003eobj2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;nul\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003enullptr\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;number\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;float\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.3\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;boolean\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efalse\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;string\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;中文测试\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;array\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mf\"\u003e1.4\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;object\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;key\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;value\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"cpgpRJ3x\"\u003e使用辅助方法构造数组或对象\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003earray\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eobject\u003c/span\u003e\u003cspan class=\"p\"\u003e({\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;id\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e \u003cspan class=\"p\"\u003e},\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;Nomango\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"p\"\u003e});\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\u003cli data-pid=\"bcF_vRfk\"\u003e判断 JSON 对象的值类型\u003c/li\u003e\u003c/ul\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"c1\"\u003e// 判断 JSON 值类型\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eis_null\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eis_boolean\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eis_integer\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eis_float\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eis_array\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"nf\"\u003eis_object\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\u003cli data-pid=\"72hGo6l1\"\u003eJSON 对象的类型转换\u003c/li\u003e\u003c/ul\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"c1\"\u003e// 显示转换\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;boolean\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eas_boolean\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e        \u003cspan class=\"c1\"\u003e// bool\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;number\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eas_integer\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e         \u003cspan class=\"c1\"\u003e// int32_t\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003ef\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;float\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eas_float\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e            \u003cspan class=\"c1\"\u003e// float\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;array\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eas_array\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// arr 实际是 std::vector\u0026lt;json\u0026gt; 类型\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"k\"\u003eauto\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;user\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eas_object\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e   \u003cspan class=\"c1\"\u003e// obj 实际是 std::map\u0026lt;std::string, json\u0026gt; 类型 \n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 强制类型转换\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;boolean\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;number\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003cspan class=\"kt\"\u003efloat\u003c/span\u003e \u003cspan class=\"n\"\u003ed\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003efloat\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;float\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cblockquote data-pid=\"DqtnXQB7\"\u003e若 JSON 值类型与待转换类型不相同也不协变，会引发 json_type_error 异常\u003c/blockquote\u003e\u003cul\u003e\u003cli data-pid=\"aiW1ehV_\"\u003eJSON 对象的比较操作符\u003c/li\u003e\u003c/ul\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;boolean\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"nb\"\u003etrue\u003c/span\u003e\n\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;number\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;number\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;number\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;float\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\u003cli data-pid=\"209Z4tzL\"\u003e取值的同时判断类型\u003c/li\u003e\u003c/ul\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"kt\"\u003ebool\u003c/span\u003e \u003cspan class=\"n\"\u003eret\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;boolean\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eget_value\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e\u003cspan class=\"n\"\u003en\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e \u003cspan class=\"c1\"\u003e// 若取值成功，ret 为 true\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\u003cli data-pid=\"2Zm6NYpi\"\u003eJSON 对象类型和数组类型的遍历\u003c/li\u003e\u003c/ul\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"c1\"\u003e// 使用迭代器遍历\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003eauto\u003c/span\u003e \u003cspan class=\"n\"\u003eiter\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ebegin\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eiter\u003c/span\u003e \u003cspan class=\"o\"\u003e!=\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e \u003cspan class=\"n\"\u003eiter\u003c/span\u003e\u003cspan class=\"o\"\u003e++\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ekey\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"s\"\u003e\u0026#34;:\u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003eiter\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003evalue\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\u003cli data-pid=\"64u5dyNV\"\u003eJSON 解析\u003c/li\u003e\u003c/ul\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"c1\"\u003e// 解析字符串\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eparse\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;{ \u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003ehappy\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e: true, \u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003epi\u003c/span\u003e\u003cspan class=\"se\"\u003e\\\u0026#34;\u003c/span\u003e\u003cspan class=\"s\"\u003e: 3.141 }\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 从文件读取 JSON\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eifstream\u003c/span\u003e \u003cspan class=\"n\"\u003eifs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;sample.json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eifs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 从标准输入流读取 JSON\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecin\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\u003cli data-pid=\"7mliHXT-\"\u003eJSON 序列化\u003c/li\u003e\u003c/ul\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"c1\"\u003e// 序列化为字符串\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ejson_str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 美化输出，使用 4 个空格对输出进行格式化\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003epretty_str\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003edump\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"sc\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 将 JSON 内容输出到文件\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eofstream\u003c/span\u003e \u003cspan class=\"n\"\u003eofs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;output.json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eofs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 将 JSON 内容输出到文件，并美化\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eofstream\u003c/span\u003e \u003cspan class=\"n\"\u003eofs\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;pretty.json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003cspan class=\"n\"\u003eofs\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003esetw\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eendl\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e// 将 JSON 内容输出到标准输出流\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003ecout\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e    \u003cspan class=\"c1\"\u003e// 可以使用 std::setw(4) 对输出内容美化\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\u003cli data-pid=\"xhyVcQGV\"\u003eJSON 与任意类型的转换\u003c/li\u003e\u003c/ul\u003e\u003cp data-pid=\"HsgHttWC\"\u003e通过特化实现 json_bind 类，可以非侵入式的实现任意对象与 JSON 的转换。\u003cbr/\u003e\u003cbr/\u003e使用效果：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"c1\"\u003e// 特化实现 json_bind\u0026lt;MyClass\u0026gt; 后，即可方便地将 MyClass 对象和 json 进行互相转换\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"n\"\u003eMyClass\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// 将 MyClass 转换为 json\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonxx\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003eto_json\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// 将 json 转换为 MyClass\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ejsonxx\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003efrom_json\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp data-pid=\"EHt8fyMl\"\u003e特化实现 json_bind 的例子：\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"c1\"\u003e// 自定义的“角色”类\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003eRole\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"n\"\u003eRole\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"k\"\u003edefault\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n    \u003cspan class=\"n\"\u003eRole\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"n\"\u003ename_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ename\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eage_\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eage\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"p\"\u003e{}\u003c/span\u003e\n\n\u003cspan class=\"k\"\u003eprivate\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003efriend\u003c/span\u003e \u003cspan class=\"n\"\u003ejson_bind\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRole\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e  \u003cspan class=\"c1\"\u003e// 声明 json_bind 友元\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\n    \u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estring\u003c/span\u003e \u003cspan class=\"n\"\u003ename_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"kt\"\u003eint\u003c/span\u003e \u003cspan class=\"n\"\u003eage_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// 特化实现 json_bind\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e// 需要实现 to_json 和 from_json 两个成员函数\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003etemplate\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u0026gt;\u003c/span\u003e\n\u003cspan class=\"k\"\u003eclass\u003c/span\u003e \u003cspan class=\"nc\"\u003ejson_bind\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e\u003cspan class=\"n\"\u003eRole\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u003c/span\u003e\n\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n\u003cspan class=\"k\"\u003epublic\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"c1\"\u003e// 将 Role 转换为 json\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"n\"\u003eto_json\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003eRole\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;age\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage_\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\n    \u003cspan class=\"c1\"\u003e// 将 json 转换为 Role\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e    \u003cspan class=\"kt\"\u003evoid\u003c/span\u003e \u003cspan class=\"nf\"\u003efrom_json\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eRole\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003econst\u003c/span\u003e \u003cspan class=\"n\"\u003ejson\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026amp;\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ename_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;name\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e].\u003c/span\u003e\u003cspan class=\"n\"\u003eas_string\u003c/span\u003e\u003cspan class=\"p\"\u003e();\u003c/span\u003e\n        \u003cspan class=\"n\"\u003ev\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eage_\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"kt\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\u003cspan class=\"n\"\u003ej\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;age\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e];\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e};\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cul\u003e\u003cli data-pid=\"DOUjjJYT\"\u003e任意类型的序列化与反序列化\u003c/li\u003e\u003c/ul\u003e\u003cp data-pid=\"UpSQSvXU\"\u003e使用 json_wrap 函数可以让任意类型实现序列化与反序列化，并与输入输出流交互\u003c/p\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003ccode class=\"language-cpp\"\u003e\u003cspan class=\"n\"\u003estd\u003c/span\u003e\u003cspan class=\"o\"\u003e::\u003c/span\u003e\u003cspan class=\"n\"\u003estringstream\u003c/span\u003e \u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// 把 obj 序列化，并输入到 s 流中\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u0026lt;\u003c/span\u003e \u003cspan class=\"n\"\u003ejson_wrap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e// 从 s 流中读取，并把 obj 反序列化\n\u003c/span\u003e\u003cspan class=\"c1\"\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ejson_wrap\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003eobj\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3\u003e更多\u003c/h3\u003e\u003cp data-pid=\"qGtXPMPx\"\u003e若你需要将 JSON 解析和序列化应用到非 std::basic_stream 流中，可以通过创建自定义 \u003ccode\u003eoutput_adapter\u003c/code\u003e 和 \u003ccode\u003einput_adapter\u003c/code\u003e 的方式实现。\u003c/p\u003e\u003cp data-pid=\"YAPNneYE\"\u003e实际上 json::parse() 和 json::dump() 函数也是通过自定义的 \u003ccode\u003estring_output_adapter\u003c/code\u003e 和 \u003ccode\u003estring_input_adapter\u003c/code\u003e 实现对字符串内容的输入和输出。\u003c/p\u003e\u003cp data-pid=\"GNXSzsiC\"\u003e详细内容请参考 json_parser.hpp 和 json_serializer.hpp。\u003c/p\u003e\u003ch3\u003e写在最后\u003c/h3\u003e\u003cp data-pid=\"on1I93bs\"\u003e很多朋友提到这个库的风格和 \u003ca href=\"https://link.zhihu.com/?target=https%3A//github.com/nlohmann/json\" class=\" wrap external\" target=\"_blank\" rel=\"nofollow noreferrer\"\u003enlohmann/json\u003c/a\u003e 很像，确实是的，当初看到这个库的时候我感叹一句“果然你能想到的别人都实现过了”，然后顺手“借鉴”了一些功能补充进来（误）\u003c/p\u003e\u003cp data-pid=\"bz_GcZ3o\"\u003e所以我也很推荐这个库，nlohmann也许是JSON for modern C++ 的最佳实践了吧！\u003c/p\u003e",
        "thumbnail_info":{
          "count":1,
          "thumbnails":[
            {
              "data_url":"",
              "url":"https://pica.zhimg.com/80/v2-c63d210e2f0112ea59e2bcf4a270d20f_qhd.jpg?source=4e949a73",
              "type":"image",
              "width":0,
              "height":0
            }
          ],
          "type":"",
          "total_count":0
        },
        "author":{
          "id":"a7e00e6155643be9f06dc261f0b5e822",
          "url_token":"liu-hai-bo-40-58",
          "name":"知乎用户YN3F0Y",
          "headline":"",
          "gender":0,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/a7e00e6155643be9f06dc261f0b5e822",
          "type":"people",
          "avatar_url":"https://pic1.zhimg.com/50/v2-abed1a8c04700ba7d72b45195223e0ff_l.jpg?source=4e949a73",
          "badge":[

          ],
          "authority_info":null,
          "voteup_count":448,
          "follower_count":83,
          "badge_v2":{
            "title":"",
            "merged_badges":[

            ],
            "detail_badges":[

            ],
            "icon":"",
            "night_icon":""
          },
          "badge_v2_string":"{\"title\":\"\",\"merged_badges\":[],\"detail_badges\":null,\"icon\":\"\",\"night_icon\":\"\"}"
        },
        "voting":0,
        "relationship":{
          "is_voted":false,
          "is_author":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "flag":null,
        "is_zhi_plus":false,
        "extra":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OrQBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYByIJMTQzMjg5NzQ3KgkyNDgyMDk5OTRKBGpzb25QAFgBYAFqBGpzb25wBIABp7yiqJ6i9QKYAQCgARGoAQCwAQG4AQDQAde9h/sF2AG5A+ABigGAAgG4AgCKAwCSAxMxNDMzNTU3Mjk3ODY4NDQ3NzQ0mgMAogMJMTAxXzNfMi4wqgMA",
        "content_tags":null
      },
      "index":17
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"检验一门语言是否掌握的标准，是用它实现一个\u003cem\u003ejson\u003c/em\u003e解析器， 我们之前培训时，对实习生/应届生自学完 python以后的第一个作业就是 5天时间实现一个 \u003cem\u003ejson\u003c/em\u003e解析器，大部分学生基本能在规定时间内完成",
        "title":"叶劲峰老师最近发表的从零开始的\u003cem\u003eJson\u003c/em\u003e库教程适合什么水平的编程学习者？"
      },
      "object":{
        "id":"122610566",
        "type":"answer",
        "excerpt":"检验一门语言是否掌握的标准，是用它实现一个\u003cem\u003ejson\u003c/em\u003e解析器， 我们之前培训时，对实习生/应届生自学完 python以后的第一个作业就是 5天时间实现一个 \u003cem\u003ejson\u003c/em\u003e解析器，大部分学生基本能在规定时间内完成",
        "url":"https://api.zhihu.com/answers/122610566",
        "voteup_count":324,
        "comment_count":54,
        "created_time":1474226272,
        "updated_time":1474284468,
        "content":"\u003cp data-pid=\"fWrn1UiW\"\u003e挺好的，检验一门语言是否掌握的标准，是用它实现一个json解析器，\u003c/p\u003e\u003cp data-pid=\"qRa70dSo\"\u003e我们之前培训时，对实习生/应届生自学完 python以后的第一个作业就是 5天时间实现一个 json解析器，大部分学生基本能在规定时间内完成，少数速度快的应届生能在 3天内完成。\u003c/p\u003e\u003cp data-pid=\"OC_W_UeR\"\u003e你学完一门语言的语法，不去动手做点啥的话，你自己心都是虚的，而实现一款 json解析器将会涉及到：该语言的常用数据结构，各种流程控制，递归，字符串，各种json的边界情况处理。。。。基本上一个语言常用的知识都能覆盖一下。\u003c/p\u003e\u003cp data-pid=\"P_zgnQEq\"\u003e关键不要求性能的话，代码量不算大，整体比较小巧。等你实现完了，你自己心里也有底了，实习生/应届生如果培训期间超过一周还实现不了，那可能以后写代码真的会比较困难吧。\u003c/p\u003e\u003cp data-pid=\"2a01cC8t\"\u003e当时我们实习生/应届生的培训基础课程列表（每门课程一周）：\u003c/p\u003e\u003cp data-pid=\"ZfI5Y1sa\"\u003ePython入门课程 - 作业：实现 json解析器（不能import py自带任何基础库，通过所有用例）\u003c/p\u003e\u003cp data-pid=\"S7SBttCc\"\u003e客户端入门课程 - 作业：Qt 实现音乐播放器（调用开源解码库，可以看歌词，有播放列表）\u003c/p\u003e\u003cp data-pid=\"ImmlZm_d\"\u003e服务端入门课程 - 作业：Python 只用socket模块实现个简单 telnet key/value 异步非阻塞服务器\u003c/p\u003e\u003cp data-pid=\"EsUPdqWS\"\u003e音视频入门课程 - 作业：C++ 实现简单帧间预测，简单编解码\u003c/p\u003e\u003cp data-pid=\"TvcRAErh\"\u003ePS：这是基础课程，培训尾声的大作业是两个学生合作用之前学到的客户端和服务端相关知识开发一个最简单的IM（无分布式），包括好友增减，双人聊天，语音录音上传+下载播放，群。\u003c/p\u003e\u003cp data-pid=\"gtndlPij\"\u003e如此，可以比较综合的检验一个学生的工程能力，抗压能力（每门课程的作业成绩有末位淘汰），也能让他们通过培训使自己的基础变得更扎实些，不管将来做服务端还是客户端还是其他，能有个入门概念。\u003c/p\u003e\u003cp data-pid=\"5Pk0uVfR\"\u003e供参考\u003c/p\u003e\u003cp data-pid=\"V3G_F1IH\"\u003e-\u003c/p\u003e",
        "thumbnail_info":{
          "count":0,
          "thumbnails":[

          ],
          "type":"thumbnail_info",
          "total_count":0
        },
        "relationship":{
          "voting":0,
          "is_author":false,
          "is_thanked":false,
          "is_nothelp":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "question":{
          "id":"50701819",
          "type":"question",
          "name":"叶劲峰老师最近发表的从零开始的\u003cem\u003eJson\u003c/em\u003e库教程适合什么水平的编程学习者？",
          "url":"https://api.zhihu.com/questions/50701819"
        },
        "author":{
          "id":"225cbdbbfac26810c6b71ce96f55de2f",
          "url_token":"skywind3000",
          "name":"韦易笑",
          "headline":"Putty本无树，MinGW亦非台",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/225cbdbbfac26810c6b71ce96f55de2f",
          "type":"people",
          "avatar_url":"https://pic2.zhimg.com/50/e4f1b0d6aa782bb9b0dee1ea384fe556_l.jpg?source=4e949a73",
          "badge":[
            {
              "type":"best_answerer",
              "description":"优秀回答者",
              "topics":[
                {
                  "id":"19553361",
                  "name":"游戏开发",
                  "introduction":"",
                  "excerpt":"",
                  "type":"topic",
                  "url":"https://api.zhihu.com/topics/19553361",
                  "avatar_url":"https://pic2.zhimg.com/50/130887c7689dc9631634a26a5f3df106_l.jpg?source=4e949a73"
                },
                {
                  "id":"19554298",
                  "name":"编程",
                  "introduction":"编程是编写程序的中文简称，就是让计算机代为解决某个问题，对某个计算体系规定一定的运算方式，是计算体系按照该计算方式运行，并最终得到相应结果的过程。为了使计算机能够理解人的意图，人类就必须将需解决的问题的思路、方法和手段通过计算机能够理解的形式告诉计算机，使得计算机能够根据人的指令一步一步去工作，完成某种特定的任务。这种人和计算体系之间交流的过程就是编程。编程：设计具备逻辑流动作用的一种“可控体系”【注：编程不一定是针对计算机程序而言的，针对具备逻辑计算力的体系，都可以算编程。】",
                  "excerpt":"编程是编写程序的中文简称，就是让计算机代为解决某个问题，对某个计算体系规定一定的运算方式，是计算体系按照该计算方式运行，并最终得到相应结果的过程。为了使计算机能够理解人的意图，人类就必须将需解决的问题的思路、方法和手段通过计算机能够理解的形式告诉计算机，使得计算机能够根据人的指令一步一步去工作，完成某种特定的任务。这种人和计算体系之间交流的过程就是编程。编程：设计具备逻辑流动作用的一种“可控体系…",
                  "type":"topic",
                  "url":"https://api.zhihu.com/topics/19554298",
                  "avatar_url":"https://pica.zhimg.com/50/v2-4030982b9aed71d12b350a4c3ba5078d_l.jpg?source=4e949a73"
                },
                {
                  "id":"19550994",
                  "name":"游戏",
                  "introduction":"游戏是一种基于物质需求满足之上的，在一种特定时间、空间范围内遵循某种特定规则的，追求精神需求满足的社会行为方式。游戏有智力游戏和活动性游戏之分，又翻译为Play，Pastime，Playgame，Sport，Spore，Squail，Games，Gamest，Hopscotch，Jeu，Toy。现在的游戏多指各种平台上的电子游戏。",
                  "excerpt":"游戏是一种基于物质需求满足之上的，在一种特定时间、空间范围内遵循某种特定规则的，追求精神需求满足的社会行为方式。游戏有智力游戏和活动性游戏之分，又翻译为Play，Pastime，Playgame，Sport，Spore，Squail，Games，Gamest，Hopscotch，Jeu，Toy。现在的游戏多指各种平台上的电子游戏。",
                  "type":"topic",
                  "url":"https://api.zhihu.com/topics/19550994",
                  "avatar_url":"https://pic2.zhimg.com/50/fb89e0ea3_l.jpg?source=4e949a73"
                },
                {
                  "id":"19552330",
                  "name":"程序员",
                  "introduction":"百战程序员(英文Programmer)是从事程序开发、程序维护的专业人员。一般将程序员分为程序设计人员和程序编码人员，但两者的界限并不非常清楚，特别是在中国。软件从业人员分为初级程序员、中级程序员、高级程序员（现为软件设计师）、系统分析员，系统架构师，测试工程师六大类。",
                  "excerpt":"百战程序员(英文Programmer)是从事程序开发、程序维护的专业人员。一般将程序员分为程序设计人员和程序编码人员，但两者的界限并不非常清楚，特别是在中国。软件从业人员分为初级程序员、中级程序员、高级程序员（现为软件设计师）、系统分析员，系统架构师，测试工程师六大类。",
                  "type":"topic",
                  "url":"https://api.zhihu.com/topics/19552330",
                  "avatar_url":"https://pic3.zhimg.com/50/acda162ad89c9b8995b51028d5233d1a_l.jpg?source=4e949a73"
                }
              ]
            },
            {
              "type":"identity",
              "description":"已认证的机构",
              "topics":[

              ]
            }
          ],
          "authority_info":null,
          "voteup_count":277824,
          "follower_count":196589,
          "badge_v2":{
            "title":"游戏开发等 4 个话题下的优秀答主",
            "merged_badges":[
              {
                "type":"best",
                "detail_type":"best",
                "title":"优秀答主",
                "description":"游戏开发等 4 个话题下的优秀答主",
                "url":"https://www.zhihu.com/question/48509984",
                "sources":[
                  {
                    "id":"19553361",
                    "token":"19553361",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19553361",
                    "name":"游戏开发",
                    "avatar_path":"130887c7689dc9631634a26a5f3df106",
                    "avatar_url":"https://pic4.zhimg.com/130887c7689dc9631634a26a5f3df106_hd.jpg",
                    "description":"",
                    "priority":0
                  },
                  {
                    "id":"19554298",
                    "token":"19554298",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19554298",
                    "name":"编程",
                    "avatar_path":"v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                    "avatar_url":"https://pic4.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_hd.jpg",
                    "description":"",
                    "priority":0
                  },
                  {
                    "id":"19550994",
                    "token":"19550994",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19550994",
                    "name":"游戏",
                    "avatar_path":"v2-ef5608869436909035792814ff650dab",
                    "avatar_url":"https://pic1.zhimg.com/v2-ef5608869436909035792814ff650dab_hd.jpg",
                    "description":"",
                    "priority":0
                  },
                  {
                    "id":"19552330",
                    "token":"19552330",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19552330",
                    "name":"程序员",
                    "avatar_path":"v2-3d917fb11613b7b13ecd7bbeb1c554e6",
                    "avatar_url":"https://pic4.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_hd.jpg",
                    "description":"",
                    "priority":0
                  }
                ],
                "icon":"",
                "night_icon":""
              }
            ],
            "detail_badges":[
              {
                "type":"best",
                "detail_type":"best_answerer",
                "title":"优秀答主",
                "description":"游戏开发等 4 个话题下的优秀答主",
                "url":"https://www.zhihu.com/question/48509984",
                "sources":[
                  {
                    "id":"19553361",
                    "token":"19553361",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19553361",
                    "name":"游戏开发",
                    "avatar_path":"130887c7689dc9631634a26a5f3df106",
                    "avatar_url":"https://pic4.zhimg.com/130887c7689dc9631634a26a5f3df106_hd.jpg",
                    "description":"",
                    "priority":0
                  },
                  {
                    "id":"19554298",
                    "token":"19554298",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19554298",
                    "name":"编程",
                    "avatar_path":"v2-27b8ba1e647956fa6f1a2a8ad90138ef",
                    "avatar_url":"https://pic4.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_hd.jpg",
                    "description":"",
                    "priority":0
                  },
                  {
                    "id":"19550994",
                    "token":"19550994",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19550994",
                    "name":"游戏",
                    "avatar_path":"v2-ef5608869436909035792814ff650dab",
                    "avatar_url":"https://pic1.zhimg.com/v2-ef5608869436909035792814ff650dab_hd.jpg",
                    "description":"",
                    "priority":0
                  },
                  {
                    "id":"19552330",
                    "token":"19552330",
                    "type":"topic",
                    "url":"https://www.zhihu.com/topic/19552330",
                    "name":"程序员",
                    "avatar_path":"v2-3d917fb11613b7b13ecd7bbeb1c554e6",
                    "avatar_url":"https://pic4.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_hd.jpg",
                    "description":"",
                    "priority":0
                  }
                ],
                "icon":"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
                "night_icon":"https://pic2.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
              }
            ],
            "icon":"https://pic2.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png",
            "night_icon":"https://pic3.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png"
          },
          "old_badges":[
            {
              "type":"best_answerer",
              "description":"优秀答主",
              "topics":[
                {
                  "id":"19553361",
                  "type":"topic",
                  "url":"https://www.zhihu.com/topic/19553361",
                  "name":"游戏开发",
                  "avatar_url":"https://pic4.zhimg.com/130887c7689dc9631634a26a5f3df106_hd.jpg"
                },
                {
                  "id":"19554298",
                  "type":"topic",
                  "url":"https://www.zhihu.com/topic/19554298",
                  "name":"编程",
                  "avatar_url":"https://pic4.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_hd.jpg"
                },
                {
                  "id":"19550994",
                  "type":"topic",
                  "url":"https://www.zhihu.com/topic/19550994",
                  "name":"游戏",
                  "avatar_url":"https://pic1.zhimg.com/v2-ef5608869436909035792814ff650dab_hd.jpg"
                },
                {
                  "id":"19552330",
                  "type":"topic",
                  "url":"https://www.zhihu.com/topic/19552330",
                  "name":"程序员",
                  "avatar_url":"https://pic4.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_hd.jpg"
                }
              ]
            }
          ],
          "badge_v2_string":"{\"title\":\"游戏开发等 4 个话题下的优秀答主\",\"merged_badges\":[{\"type\":\"best\",\"detail_type\":\"best\",\"title\":\"优秀答主\",\"description\":\"游戏开发等 4 个话题下的优秀答主\",\"url\":\"https://www.zhihu.com/question/48509984\",\"sources\":[{\"id\":\"19553361\",\"token\":\"19553361\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19553361\",\"name\":\"游戏开发\",\"avatar_path\":\"130887c7689dc9631634a26a5f3df106\",\"avatar_url\":\"https://pic4.zhimg.com/130887c7689dc9631634a26a5f3df106_hd.jpg\",\"description\":\"\",\"priority\":0},{\"id\":\"19554298\",\"token\":\"19554298\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19554298\",\"name\":\"编程\",\"avatar_path\":\"v2-27b8ba1e647956fa6f1a2a8ad90138ef\",\"avatar_url\":\"https://pic4.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_hd.jpg\",\"description\":\"\",\"priority\":0},{\"id\":\"19550994\",\"token\":\"19550994\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19550994\",\"name\":\"游戏\",\"avatar_path\":\"v2-ef5608869436909035792814ff650dab\",\"avatar_url\":\"https://pic1.zhimg.com/v2-ef5608869436909035792814ff650dab_hd.jpg\",\"description\":\"\",\"priority\":0},{\"id\":\"19552330\",\"token\":\"19552330\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19552330\",\"name\":\"程序员\",\"avatar_path\":\"v2-3d917fb11613b7b13ecd7bbeb1c554e6\",\"avatar_url\":\"https://pic4.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_hd.jpg\",\"description\":\"\",\"priority\":0}],\"icon\":\"\",\"night_icon\":\"\"}],\"detail_badges\":[{\"type\":\"best\",\"detail_type\":\"best_answerer\",\"title\":\"优秀答主\",\"description\":\"游戏开发等 4 个话题下的优秀答主\",\"url\":\"https://www.zhihu.com/question/48509984\",\"sources\":[{\"id\":\"19553361\",\"token\":\"19553361\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19553361\",\"name\":\"游戏开发\",\"avatar_path\":\"130887c7689dc9631634a26a5f3df106\",\"avatar_url\":\"https://pic4.zhimg.com/130887c7689dc9631634a26a5f3df106_hd.jpg\",\"description\":\"\",\"priority\":0},{\"id\":\"19554298\",\"token\":\"19554298\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19554298\",\"name\":\"编程\",\"avatar_path\":\"v2-27b8ba1e647956fa6f1a2a8ad90138ef\",\"avatar_url\":\"https://pic4.zhimg.com/v2-27b8ba1e647956fa6f1a2a8ad90138ef_hd.jpg\",\"description\":\"\",\"priority\":0},{\"id\":\"19550994\",\"token\":\"19550994\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19550994\",\"name\":\"游戏\",\"avatar_path\":\"v2-ef5608869436909035792814ff650dab\",\"avatar_url\":\"https://pic1.zhimg.com/v2-ef5608869436909035792814ff650dab_hd.jpg\",\"description\":\"\",\"priority\":0},{\"id\":\"19552330\",\"token\":\"19552330\",\"type\":\"topic\",\"url\":\"https://www.zhihu.com/topic/19552330\",\"name\":\"程序员\",\"avatar_path\":\"v2-3d917fb11613b7b13ecd7bbeb1c554e6\",\"avatar_url\":\"https://pic4.zhimg.com/v2-3d917fb11613b7b13ecd7bbeb1c554e6_hd.jpg\",\"description\":\"\",\"priority\":0}],\"icon\":\"https://pic3.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic2.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"}],\"icon\":\"https://pic2.zhimg.com/v2-bf0eec3c31c8e866c468f60eb296696c_l.png\",\"night_icon\":\"https://pic3.zhimg.com/v2-c724649168d8f9d36d7c3d13140a2594_l.png\"}"
        },
        "flag":{
          "flag_type":"author_follower",
          "flag_text":""
        },
        "is_zhi_plus":false,
        "extra":"",
        "health_tabs":null,
        "health_tag":"",
        "sub_content_type":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OtIBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYBCIINDQ1MzgyNDUqCTEyMjYxMDU2NjIIMTI0OTczMjg6CDUwNzAxODE5SgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCmAEAoAESqAEAsAEBuAEAwgEJ6auY5YWz5rOo0AHg0Pu+BdgBxALgATaAAgG4AgCKAwCSAxMxNDMzNTU3Mjk3ODY4NDQ3NzQ0mgMAogMJMTAxXzNfMi4wqgMA",
        "content_tags":null
      },
      "index":18
    },
    {
      "type":"search_result",
      "highlight":{
        "description":"所以便需要一个规范来约定如何用文本字符或者二进制来表示一个对象，而其中一种基于文本字符串的规范就是 \u003cem\u003eJSON\u003c/em\u003e。 \u003cem\u003eJSON\u003c/em\u003e 本质就是一个字符串，可以通过 \u003cem\u003eJSON\u003c/em\u003e 解析引擎解析出一个对象。",
        "title":"能说说你对\u003cem\u003eJSON\u003c/em\u003e的理解吗？"
      },
      "object":{
        "id":"855102600",
        "type":"answer",
        "excerpt":"所以便需要一个规范来约定如何用文本字符或者二进制来表示一个对象，而其中一种基于文本字符串的规范就是 \u003cem\u003eJSON\u003c/em\u003e。 \u003cem\u003eJSON\u003c/em\u003e 本质就是一个字符串，可以通过 \u003cem\u003eJSON\u003c/em\u003e 解析引擎解析出一个对象。",
        "url":"https://api.zhihu.com/answers/855102600",
        "voteup_count":2,
        "comment_count":0,
        "created_time":1570895513,
        "updated_time":1571623121,
        "content":"\u003cp data-pid=\"LIdfQ4_1\"\u003e和 JSON 类似的序列化技术还有 XML, YML 等。\u003c/p\u003e\u003cp data-pid=\"-kxCYcjY\"\u003e在说我对 JSON 的理解前我想先说说 \u003ccode\u003e序列化\u003c/code\u003e 这个词。最早我了解到序列化这个词的时候是在我学习 JAVA 的时候，那时候知道可以通过序列化 API 将 JAVA 的一个对象序列化成一个字节文件，里面保存了被序列化的对象的信息，比如包含了类名是什么，有哪些字段等，然后又可以通过序列化   API 将字节文件还原出原本的 JAVA 对象。\u003c/p\u003e\u003cp data-pid=\"JjPeeZSb\"\u003e至于为什么要序列化，你可以这么想，我们有时需要通过网络传输一些对象信息，例如 HTTP 网络传输，可以是传输文本字符内容，也可以传输二进制内容。所以便需要一个规范来约定如何用文本字符或者二进制来表示一个对象，而其中一种基于文本字符串的规范就是 JSON。\u003c/p\u003e\u003cblockquote data-pid=\"49St23pw\"\u003eJSON 本质就是一个字符串，可以通过 JSON 解析引擎解析出一个对象。\u003c/blockquote\u003e",
        "thumbnail_info":{
          "count":0,
          "thumbnails":[

          ],
          "type":"thumbnail_info",
          "total_count":0
        },
        "relationship":{
          "voting":0,
          "is_author":false,
          "is_thanked":false,
          "is_nothelp":false,
          "following_upvoter":[

          ],
          "following_upvoter_count":0
        },
        "question":{
          "id":"349668099",
          "type":"question",
          "name":"能说说你对\u003cem\u003eJSON\u003c/em\u003e的理解吗？",
          "url":"https://api.zhihu.com/questions/349668099"
        },
        "author":{
          "id":"d2ac77c3867351c2a632312b2f417e24",
          "url_token":"yu-teng-jing",
          "name":"余腾靖",
          "headline":"在搞 Electron 和 CEP",
          "gender":1,
          "is_followed":false,
          "is_following":false,
          "user_type":"people",
          "url":"https://api.zhihu.com/people/d2ac77c3867351c2a632312b2f417e24",
          "type":"people",
          "avatar_url":"https://pic3.zhimg.com/50/v2-a2122d61cb1b49987bed5ff8422720a6_l.jpg?source=4e949a73",
          "badge":[

          ],
          "authority_info":null,
          "voteup_count":5116,
          "follower_count":1009,
          "badge_v2":{
            "title":"",
            "merged_badges":[

            ],
            "detail_badges":[

            ],
            "icon":"",
            "night_icon":""
          },
          "badge_v2_string":"{\"title\":\"\",\"merged_badges\":[],\"detail_badges\":null,\"icon\":\"\",\"night_icon\":\"\"}"
        },
        "flag":null,
        "is_zhi_plus":false,
        "extra":"",
        "health_tabs":null,
        "health_tag":"",
        "sub_content_type":"",
        "settings":{
          "table_of_contents":{
            "enabled":false
          }
        },
        "attached_info_bytes":"OscBCgtwbGFjZWhvbGRlchIgNmQwOTk5MDNkYmYzMDJmMTZkZTMwMzdjN2VjN2NlYWIYBCIJMTg1NTQxMTA4Kgk4NTUxMDI2MDAyCDM5OTgxOTk3OgkzNDk2NjgwOTlKBGpzb25QAFgBYAFqBGpzb25wBIABp7yiqJ6i9QKYAQCgAROoAQCwAQG4AQDQAZnth+0F2AEC4AEAgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMKoDAA==",
        "content_tags":null
      },
      "index":19
    }
  ],
  "related_search_result":[

  ],
  "search_action_info":{
    "attached_info_bytes":"Om4SIDZkMDk5OTAzZGJmMzAyZjE2ZGUzMDM3YzdlYzdjZWFiSgRqc29uUABYAWABagRqc29ucASAAae8oqieovUCgAIBuAIAigMAkgMTMTQzMzU1NzI5Nzg2ODQ0Nzc0NJoDAKIDCTEwMV8zXzIuMA==",
    "lc_idx":20,
    "search_hash_id":"6d099903dbf302f16de3037c7ec7ceab",
    "isfeed":false
  },
  "is_brand_word":false,
  "pendant":null,
  "sensitive_level":-1,
  "warning":"",
  "filter_items":null
}